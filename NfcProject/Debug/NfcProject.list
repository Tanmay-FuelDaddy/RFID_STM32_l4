
NfcProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000559c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005724  08005724  00006724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800576c  0800576c  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  0800576c  0800576c  0000676c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005774  08005774  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005774  08005774  00006774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005778  08005778  00006778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800577c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000000c  08005788  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  200001d8  08005788  000071d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011672  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028b0  00000000  00000000  000186ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  0001af60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b8d  00000000  00000000  0001be68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004453  00000000  00000000  0001c9f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013bcc  00000000  00000000  00020e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6c25  00000000  00000000  00034a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012b639  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d28  00000000  00000000  0012b67c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0012f3a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800570c 	.word	0x0800570c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800570c 	.word	0x0800570c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	db0b      	blt.n	80004e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	f003 021f 	and.w	r2, r3, #31
 80004d0:	4907      	ldr	r1, [pc, #28]	@ (80004f0 <__NVIC_EnableIRQ+0x38>)
 80004d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004d6:	095b      	lsrs	r3, r3, #5
 80004d8:	2001      	movs	r0, #1
 80004da:	fa00 f202 	lsl.w	r2, r0, r2
 80004de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	e000e100 	.word	0xe000e100

080004f4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000502:	2b00      	cmp	r3, #0
 8000504:	db12      	blt.n	800052c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	f003 021f 	and.w	r2, r3, #31
 800050c:	490a      	ldr	r1, [pc, #40]	@ (8000538 <__NVIC_DisableIRQ+0x44>)
 800050e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000512:	095b      	lsrs	r3, r3, #5
 8000514:	2001      	movs	r0, #1
 8000516:	fa00 f202 	lsl.w	r2, r0, r2
 800051a:	3320      	adds	r3, #32
 800051c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000520:	f3bf 8f4f 	dsb	sy
}
 8000524:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000526:	f3bf 8f6f 	isb	sy
}
 800052a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	e000e100 	.word	0xe000e100

0800053c <st25r3916comStart>:
 ******************************************************************************
 * LOCAL FUNCTION
 ******************************************************************************
 */
static void st25r3916comStart( void )
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
    /* Make this operation atomic, disabling ST25R3916 interrupt during communications*/
    platformProtectST25RComm();
 8000540:	4b09      	ldr	r3, [pc, #36]	@ (8000568 <st25r3916comStart+0x2c>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	3301      	adds	r3, #1
 8000546:	b2da      	uxtb	r2, r3
 8000548:	4b07      	ldr	r3, [pc, #28]	@ (8000568 <st25r3916comStart+0x2c>)
 800054a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800054c:	f3bf 8f4f 	dsb	sy
}
 8000550:	bf00      	nop
 8000552:	2006      	movs	r0, #6
 8000554:	f7ff ffce 	bl	80004f4 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8000558:	f3bf 8f4f 	dsb	sy
}
 800055c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800055e:	f3bf 8f6f 	isb	sy
}
 8000562:	bf00      	nop
        comBufIt = 0;                                  /* reset local buffer position   */
    #endif /* ST25R_COM_SINGLETXRX */
    
#endif /* RFAL_USE_I2C */
    
}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}
 8000568:	200001d0 	.word	0x200001d0

0800056c <st25r3916comStop>:


/*******************************************************************************/
static void st25r3916comStop( void )
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
    /* Release the chip select */
    platformSpiDeselect();
#endif /* RFAL_USE_I2C */
    
    /* reEnable the ST25R3916 interrupt */
    platformUnprotectST25RComm();
 8000570:	4b07      	ldr	r3, [pc, #28]	@ (8000590 <st25r3916comStop+0x24>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	3b01      	subs	r3, #1
 8000576:	b2da      	uxtb	r2, r3
 8000578:	4b05      	ldr	r3, [pc, #20]	@ (8000590 <st25r3916comStop+0x24>)
 800057a:	701a      	strb	r2, [r3, #0]
 800057c:	4b04      	ldr	r3, [pc, #16]	@ (8000590 <st25r3916comStop+0x24>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d102      	bne.n	800058a <st25r3916comStop+0x1e>
 8000584:	2006      	movs	r0, #6
 8000586:	f7ff ff97 	bl	80004b8 <__NVIC_EnableIRQ>
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	200001d0 	.word	0x200001d0

08000594 <st25r3916comRepeatStart>:


/*******************************************************************************/
#ifdef RFAL_USE_I2C
static void st25r3916comRepeatStart( void )
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
    st25r3916I2CRepeatStart();
    st25r3916I2CSlaveAddrRD( ST25R3916_I2C_ADDR );
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <st25r3916comTx>:
#endif /* RFAL_USE_I2C */


/*******************************************************************************/
static void st25r3916comTx( const uint8_t* txBuf, uint16_t txLen, bool last, bool txOnly )
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b084      	sub	sp, #16
 80005a6:	af02      	add	r7, sp, #8
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	4608      	mov	r0, r1
 80005ac:	4611      	mov	r1, r2
 80005ae:	461a      	mov	r2, r3
 80005b0:	4603      	mov	r3, r0
 80005b2:	807b      	strh	r3, [r7, #2]
 80005b4:	460b      	mov	r3, r1
 80005b6:	707b      	strb	r3, [r7, #1]
 80005b8:	4613      	mov	r3, r2
 80005ba:	703b      	strb	r3, [r7, #0]
    RFAL_NO_WARNING(last);
    RFAL_NO_WARNING(txOnly);
    
    if( txLen > 0U )
 80005bc:	887b      	ldrh	r3, [r7, #2]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d008      	beq.n	80005d4 <st25r3916comTx+0x32>
    {
#ifdef RFAL_USE_I2C
        platformI2CTx( txBuf, txLen, last, txOnly );
 80005c2:	7879      	ldrb	r1, [r7, #1]
 80005c4:	887a      	ldrh	r2, [r7, #2]
 80005c6:	783b      	ldrb	r3, [r7, #0]
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	460b      	mov	r3, r1
 80005cc:	6879      	ldr	r1, [r7, #4]
 80005ce:	20a0      	movs	r0, #160	@ 0xa0
 80005d0:	f000 f918 	bl	8000804 <i2cSequentialTx>
            platformSpiTxRx( txBuf, NULL, txLen );
        #endif /* ST25R_COM_SINGLETXRX */
            
#endif /* RFAL_USE_I2C */
    }
}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <st25r3916comRx>:


/*******************************************************************************/
static void st25r3916comRx( uint8_t* rxBuf, uint16_t rxLen )
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	460b      	mov	r3, r1
 80005e6:	807b      	strh	r3, [r7, #2]
    if( rxLen > 0U )
 80005e8:	887b      	ldrh	r3, [r7, #2]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d005      	beq.n	80005fa <st25r3916comRx+0x1e>
    {
#ifdef RFAL_USE_I2C
        platformI2CRx( rxBuf, rxLen );
 80005ee:	887b      	ldrh	r3, [r7, #2]
 80005f0:	461a      	mov	r2, r3
 80005f2:	6879      	ldr	r1, [r7, #4]
 80005f4:	20a0      	movs	r0, #160	@ 0xa0
 80005f6:	f000 f94f 	bl	8000898 <i2cSequentialRx>
        }
        platformSpiTxRx( NULL, rxBuf, rxLen );
    #endif /* ST25R_COM_SINGLETXRX */
#endif /* RFAL_USE_I2C */
    }
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <st25r3916comTxByte>:


/*******************************************************************************/
static void st25r3916comTxByte( uint8_t txByte, bool last, bool txOnly )
{
 8000602:	b580      	push	{r7, lr}
 8000604:	b084      	sub	sp, #16
 8000606:	af00      	add	r7, sp, #0
 8000608:	4603      	mov	r3, r0
 800060a:	71fb      	strb	r3, [r7, #7]
 800060c:	460b      	mov	r3, r1
 800060e:	71bb      	strb	r3, [r7, #6]
 8000610:	4613      	mov	r3, r2
 8000612:	717b      	strb	r3, [r7, #5]
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	73fb      	strb	r3, [r7, #15]
    st25r3916comTx( &val, ST25R3916_REG_LEN, last, txOnly );
 8000618:	797b      	ldrb	r3, [r7, #5]
 800061a:	79ba      	ldrb	r2, [r7, #6]
 800061c:	f107 000f 	add.w	r0, r7, #15
 8000620:	2101      	movs	r1, #1
 8000622:	f7ff ffbe 	bl	80005a2 <st25r3916comTx>
}
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <st25r3916ReadMultipleRegisters>:
}


/*******************************************************************************/
ReturnCode st25r3916ReadMultipleRegisters( uint8_t reg, uint8_t* values, uint8_t length )
{
 800062e:	b580      	push	{r7, lr}
 8000630:	b082      	sub	sp, #8
 8000632:	af00      	add	r7, sp, #0
 8000634:	4603      	mov	r3, r0
 8000636:	6039      	str	r1, [r7, #0]
 8000638:	71fb      	strb	r3, [r7, #7]
 800063a:	4613      	mov	r3, r2
 800063c:	71bb      	strb	r3, [r7, #6]
    if( length > 0U )
 800063e:	79bb      	ldrb	r3, [r7, #6]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d01e      	beq.n	8000682 <st25r3916ReadMultipleRegisters+0x54>
    {
        st25r3916comStart();
 8000644:	f7ff ff7a 	bl	800053c <st25r3916comStart>
        
        /* If is a space-B register send a direct command first */
        if( (reg & ST25R3916_SPACE_B) != 0U )
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800064e:	2b00      	cmp	r3, #0
 8000650:	d004      	beq.n	800065c <st25r3916ReadMultipleRegisters+0x2e>
        {
            st25r3916comTxByte( ST25R3916_CMD_SPACE_B_ACCESS, false, false );
 8000652:	2200      	movs	r2, #0
 8000654:	2100      	movs	r1, #0
 8000656:	20fb      	movs	r0, #251	@ 0xfb
 8000658:	f7ff ffd3 	bl	8000602 <st25r3916comTxByte>
        }
        
        st25r3916comTxByte( ((reg & ~ST25R3916_SPACE_B) | ST25R3916_READ_MODE), true, false );
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2200      	movs	r2, #0
 8000666:	2101      	movs	r1, #1
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ffca 	bl	8000602 <st25r3916comTxByte>
        st25r3916comRepeatStart();
 800066e:	f7ff ff91 	bl	8000594 <st25r3916comRepeatStart>
        st25r3916comRx( values, length );
 8000672:	79bb      	ldrb	r3, [r7, #6]
 8000674:	b29b      	uxth	r3, r3
 8000676:	4619      	mov	r1, r3
 8000678:	6838      	ldr	r0, [r7, #0]
 800067a:	f7ff ffaf 	bl	80005dc <st25r3916comRx>
        st25r3916comStop();
 800067e:	f7ff ff75 	bl	800056c <st25r3916comStop>
    }
    
    return RFAL_ERR_NONE;
 8000682:	2300      	movs	r3, #0
}
 8000684:	4618      	mov	r0, r3
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <__NVIC_EnableIRQ>:
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069a:	2b00      	cmp	r3, #0
 800069c:	db0b      	blt.n	80006b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	f003 021f 	and.w	r2, r3, #31
 80006a4:	4907      	ldr	r1, [pc, #28]	@ (80006c4 <__NVIC_EnableIRQ+0x38>)
 80006a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006aa:	095b      	lsrs	r3, r3, #5
 80006ac:	2001      	movs	r0, #1
 80006ae:	fa00 f202 	lsl.w	r2, r0, r2
 80006b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000e100 	.word	0xe000e100

080006c8 <__NVIC_DisableIRQ>:
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	db12      	blt.n	8000700 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	f003 021f 	and.w	r2, r3, #31
 80006e0:	490a      	ldr	r1, [pc, #40]	@ (800070c <__NVIC_DisableIRQ+0x44>)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	095b      	lsrs	r3, r3, #5
 80006e8:	2001      	movs	r0, #1
 80006ea:	fa00 f202 	lsl.w	r2, r0, r2
 80006ee:	3320      	adds	r3, #32
 80006f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80006f4:	f3bf 8f4f 	dsb	sy
}
 80006f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006fa:	f3bf 8f6f 	isb	sy
}
 80006fe:	bf00      	nop
}
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	e000e100 	.word	0xe000e100

08000710 <st25r3916Isr>:
}


/*******************************************************************************/
void st25r3916Isr( void )
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
    st25r3916CheckForReceivedInterrupts();
 8000714:	f000 f80c 	bl	8000730 <st25r3916CheckForReceivedInterrupts>
    
    // Check if callback is set and run it
    if( NULL != st25r3916interrupt.callback )
 8000718:	4b04      	ldr	r3, [pc, #16]	@ (800072c <st25r3916Isr+0x1c>)
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d002      	beq.n	8000726 <st25r3916Isr+0x16>
    {
        st25r3916interrupt.callback();
 8000720:	4b02      	ldr	r3, [pc, #8]	@ (800072c <st25r3916Isr+0x1c>)
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	4798      	blx	r3
    }
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000028 	.word	0x20000028

08000730 <st25r3916CheckForReceivedInterrupts>:


/*******************************************************************************/
void st25r3916CheckForReceivedInterrupts( void )
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
    uint8_t  iregs[ST25R3916_INT_REGS_LEN];
    uint32_t irqStatus;
    
    /* Initialize iregs */
    irqStatus = ST25R3916_IRQ_MASK_NONE;
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
    RFAL_MEMSET( iregs, (int32_t)(ST25R3916_IRQ_MASK_ALL & 0xFFU), ST25R3916_INT_REGS_LEN );
 800073a:	463b      	mov	r3, r7
 800073c:	2204      	movs	r2, #4
 800073e:	21ff      	movs	r1, #255	@ 0xff
 8000740:	4618      	mov	r0, r3
 8000742:	f004 ffb6 	bl	80056b2 <memset>
    
    
    /* In case the IRQ is Edge (not Level) triggered read IRQs until done */
   while( platformGpioIsHigh( ST25R_INT_PORT, ST25R_INT_PIN ) )
 8000746:	e019      	b.n	800077c <st25r3916CheckForReceivedInterrupts+0x4c>
   {
       st25r3916ReadMultipleRegisters( ST25R3916_REG_IRQ_MAIN, iregs, ST25R3916_INT_REGS_LEN );
 8000748:	463b      	mov	r3, r7
 800074a:	2204      	movs	r2, #4
 800074c:	4619      	mov	r1, r3
 800074e:	201a      	movs	r0, #26
 8000750:	f7ff ff6d 	bl	800062e <st25r3916ReadMultipleRegisters>
       
       irqStatus |= (uint32_t)iregs[0];
 8000754:	783b      	ldrb	r3, [r7, #0]
 8000756:	461a      	mov	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4313      	orrs	r3, r2
 800075c:	607b      	str	r3, [r7, #4]
       irqStatus |= (uint32_t)iregs[1]<<8;
 800075e:	787b      	ldrb	r3, [r7, #1]
 8000760:	021b      	lsls	r3, r3, #8
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	4313      	orrs	r3, r2
 8000766:	607b      	str	r3, [r7, #4]
       irqStatus |= (uint32_t)iregs[2]<<16;
 8000768:	78bb      	ldrb	r3, [r7, #2]
 800076a:	041b      	lsls	r3, r3, #16
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	4313      	orrs	r3, r2
 8000770:	607b      	str	r3, [r7, #4]
       irqStatus |= (uint32_t)iregs[3]<<24;
 8000772:	78fb      	ldrb	r3, [r7, #3]
 8000774:	061b      	lsls	r3, r3, #24
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	4313      	orrs	r3, r2
 800077a:	607b      	str	r3, [r7, #4]
   while( platformGpioIsHigh( ST25R_INT_PORT, ST25R_INT_PIN ) )
 800077c:	2101      	movs	r1, #1
 800077e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000782:	f000 ffdd 	bl	8001740 <HAL_GPIO_ReadPin>
 8000786:	4603      	mov	r3, r0
 8000788:	2b01      	cmp	r3, #1
 800078a:	d0dd      	beq.n	8000748 <st25r3916CheckForReceivedInterrupts+0x18>
   }
   
   /* Forward all interrupts, even masked ones to application */
   platformProtectST25RIrqStatus();
 800078c:	4b16      	ldr	r3, [pc, #88]	@ (80007e8 <st25r3916CheckForReceivedInterrupts+0xb8>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	3301      	adds	r3, #1
 8000792:	b2da      	uxtb	r2, r3
 8000794:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <st25r3916CheckForReceivedInterrupts+0xb8>)
 8000796:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000798:	f3bf 8f4f 	dsb	sy
}
 800079c:	bf00      	nop
 800079e:	2006      	movs	r0, #6
 80007a0:	f7ff ff92 	bl	80006c8 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 80007a4:	f3bf 8f4f 	dsb	sy
}
 80007a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007aa:	f3bf 8f6f 	isb	sy
}
 80007ae:	bf00      	nop
   st25r3916interrupt.status |= irqStatus;
 80007b0:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <st25r3916CheckForReceivedInterrupts+0xbc>)
 80007b2:	689a      	ldr	r2, [r3, #8]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	4a0c      	ldr	r2, [pc, #48]	@ (80007ec <st25r3916CheckForReceivedInterrupts+0xbc>)
 80007ba:	6093      	str	r3, [r2, #8]
   platformUnprotectST25RIrqStatus();
 80007bc:	4b0a      	ldr	r3, [pc, #40]	@ (80007e8 <st25r3916CheckForReceivedInterrupts+0xb8>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	3b01      	subs	r3, #1
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <st25r3916CheckForReceivedInterrupts+0xb8>)
 80007c6:	701a      	strb	r2, [r3, #0]
 80007c8:	4b07      	ldr	r3, [pc, #28]	@ (80007e8 <st25r3916CheckForReceivedInterrupts+0xb8>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d102      	bne.n	80007d6 <st25r3916CheckForReceivedInterrupts+0xa6>
 80007d0:	2006      	movs	r0, #6
 80007d2:	f7ff ff5b 	bl	800068c <__NVIC_EnableIRQ>
   
   /* Send an IRQ event to LED handling */
   st25r3916ledEvtIrq( st25r3916interrupt.status );
 80007d6:	4b05      	ldr	r3, [pc, #20]	@ (80007ec <st25r3916CheckForReceivedInterrupts+0xbc>)
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 f808 	bl	80007f0 <st25r3916ledEvtIrq>
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	200001d0 	.word	0x200001d0
 80007ec:	20000028 	.word	0x20000028

080007f0 <st25r3916ledEvtIrq>:
}


/*******************************************************************************/
void st25r3916ledEvtIrq( uint32_t irqs )
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
    
    if( ((irqs & (ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_ERR1 | ST25R3916_IRQ_MASK_ERR2)) != 0U) )
    {
        st25r3916ledErrOn();
    }
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <i2cSequentialTx>:
  return HAL_I2C_Master_Transmit( pI2c, address, rxBuf, rxLen, I2C_TIMEOUT);
}


HAL_StatusTypeDef i2cSequentialTx( uint8_t address, const uint8_t *txBuf, uint16_t txLen, bool last, bool txOnly )
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af02      	add	r7, sp, #8
 800080a:	6039      	str	r1, [r7, #0]
 800080c:	4611      	mov	r1, r2
 800080e:	461a      	mov	r2, r3
 8000810:	4603      	mov	r3, r0
 8000812:	71fb      	strb	r3, [r7, #7]
 8000814:	460b      	mov	r3, r1
 8000816:	80bb      	strh	r3, [r7, #4]
 8000818:	4613      	mov	r3, r2
 800081a:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef ret;
    uint32_t txFlag;
  
    if( last && txOnly )
 800081c:	79bb      	ldrb	r3, [r7, #6]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d006      	beq.n	8000830 <i2cSequentialTx+0x2c>
 8000822:	7e3b      	ldrb	r3, [r7, #24]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d003      	beq.n	8000830 <i2cSequentialTx+0x2c>
    {
      txFlag = I2C_LAST_FRAME;
 8000828:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	e007      	b.n	8000840 <i2cSequentialTx+0x3c>
    }
    else
    {
      txFlag = (last ? /*I2C_LAST_FRAME_NO_STOP*/ I2C_FIRST_FRAME : I2C_FIRST_AND_NEXT_FRAME);
 8000830:	79bb      	ldrb	r3, [r7, #6]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <i2cSequentialTx+0x36>
 8000836:	2300      	movs	r3, #0
 8000838:	e001      	b.n	800083e <i2cSequentialTx+0x3a>
 800083a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800083e:	60fb      	str	r3, [r7, #12]
    }
    
    ret = HAL_I2C_Master_Sequential_Transmit_IT(pI2c, (uint16_t)address, (uint8_t*)txBuf, txLen, txFlag );
 8000840:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <i2cSequentialTx+0x90>)
 8000842:	6818      	ldr	r0, [r3, #0]
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	b299      	uxth	r1, r3
 8000848:	88ba      	ldrh	r2, [r7, #4]
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	4613      	mov	r3, r2
 8000850:	683a      	ldr	r2, [r7, #0]
 8000852:	f001 f8a1 	bl	8001998 <HAL_I2C_Master_Seq_Transmit_IT>
 8000856:	4603      	mov	r3, r0
 8000858:	72fb      	strb	r3, [r7, #11]
    if( ret != HAL_OK )
 800085a:	7afb      	ldrb	r3, [r7, #11]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <i2cSequentialTx+0x60>
    {
      return ret;
 8000860:	7afb      	ldrb	r3, [r7, #11]
 8000862:	e013      	b.n	800088c <i2cSequentialTx+0x88>
    }
    
    while( HAL_I2C_GetState(pI2c) != HAL_I2C_STATE_READY );
 8000864:	bf00      	nop
 8000866:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <i2cSequentialTx+0x90>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fab3 	bl	8001dd6 <HAL_I2C_GetState>
 8000870:	4603      	mov	r3, r0
 8000872:	2b20      	cmp	r3, #32
 8000874:	d1f7      	bne.n	8000866 <i2cSequentialTx+0x62>
    
    if( HAL_I2C_GetError(pI2c) != HAL_I2C_ERROR_NONE )
 8000876:	4b07      	ldr	r3, [pc, #28]	@ (8000894 <i2cSequentialTx+0x90>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4618      	mov	r0, r3
 800087c:	f001 fab9 	bl	8001df2 <HAL_I2C_GetError>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <i2cSequentialTx+0x86>
    {
      return HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	e000      	b.n	800088c <i2cSequentialTx+0x88>
    }
    return HAL_OK;
 800088a:	2300      	movs	r3, #0
}
 800088c:	4618      	mov	r0, r3
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000038 	.word	0x20000038

08000898 <i2cSequentialRx>:


HAL_StatusTypeDef i2cSequentialRx( uint8_t address, uint8_t *rxBuf, uint16_t rxLen )
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af02      	add	r7, sp, #8
 800089e:	4603      	mov	r3, r0
 80008a0:	6039      	str	r1, [r7, #0]
 80008a2:	71fb      	strb	r3, [r7, #7]
 80008a4:	4613      	mov	r3, r2
 80008a6:	80bb      	strh	r3, [r7, #4]
    HAL_StatusTypeDef ret;
    
    ret = HAL_I2C_Master_Sequential_Receive_IT(pI2c, (uint16_t)address, (uint8_t*)rxBuf, rxLen, I2C_LAST_FRAME);
 80008a8:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <i2cSequentialRx+0x64>)
 80008aa:	6818      	ldr	r0, [r3, #0]
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	b299      	uxth	r1, r3
 80008b0:	88bb      	ldrh	r3, [r7, #4]
 80008b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80008b6:	9200      	str	r2, [sp, #0]
 80008b8:	683a      	ldr	r2, [r7, #0]
 80008ba:	f001 f92b 	bl	8001b14 <HAL_I2C_Master_Seq_Receive_IT>
 80008be:	4603      	mov	r3, r0
 80008c0:	73fb      	strb	r3, [r7, #15]
    if( ret != HAL_OK )
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <i2cSequentialRx+0x34>
    {
      return ret;
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
 80008ca:	e013      	b.n	80008f4 <i2cSequentialRx+0x5c>
    }
    
    while( HAL_I2C_GetState(pI2c) != HAL_I2C_STATE_READY );
 80008cc:	bf00      	nop
 80008ce:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <i2cSequentialRx+0x64>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f001 fa7f 	bl	8001dd6 <HAL_I2C_GetState>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b20      	cmp	r3, #32
 80008dc:	d1f7      	bne.n	80008ce <i2cSequentialRx+0x36>
    
    if( HAL_I2C_GetError(pI2c) != HAL_I2C_ERROR_NONE )
 80008de:	4b07      	ldr	r3, [pc, #28]	@ (80008fc <i2cSequentialRx+0x64>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 fa85 	bl	8001df2 <HAL_I2C_GetError>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <i2cSequentialRx+0x5a>
    {
      return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e000      	b.n	80008f4 <i2cSequentialRx+0x5c>
    }
    
    return HAL_OK;
 80008f2:	2300      	movs	r3, #0
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000038 	.word	0x20000038

08000900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000904:	f000 fb96 	bl	8001034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000908:	f000 f80a 	bl	8000920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090c:	f000 f902 	bl	8000b14 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000910:	f000 f85c 	bl	80009cc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000914:	f000 f8ce 	bl	8000ab4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000918:	f000 f89c 	bl	8000a54 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <main+0x1c>

08000920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b096      	sub	sp, #88	@ 0x58
 8000924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	2244      	movs	r2, #68	@ 0x44
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f004 febf 	bl	80056b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000934:	463b      	mov	r3, r7
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000942:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000946:	f002 fe21 	bl	800358c <HAL_PWREx_ControlVoltageScaling>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000950:	f000 f9a0 	bl	8000c94 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000954:	f002 fdfc 	bl	8003550 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000958:	4b1b      	ldr	r3, [pc, #108]	@ (80009c8 <SystemClock_Config+0xa8>)
 800095a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800095e:	4a1a      	ldr	r2, [pc, #104]	@ (80009c8 <SystemClock_Config+0xa8>)
 8000960:	f023 0318 	bic.w	r3, r3, #24
 8000964:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000968:	2314      	movs	r3, #20
 800096a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800096c:	2301      	movs	r3, #1
 800096e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000970:	2301      	movs	r3, #1
 8000972:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000978:	23b0      	movs	r3, #176	@ 0xb0
 800097a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800097c:	2300      	movs	r3, #0
 800097e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4618      	mov	r0, r3
 8000986:	f002 fe57 	bl	8003638 <HAL_RCC_OscConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000990:	f000 f980 	bl	8000c94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000994:	230f      	movs	r3, #15
 8000996:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009a8:	463b      	mov	r3, r7
 80009aa:	2102      	movs	r1, #2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f003 fa1f 	bl	8003df0 <HAL_RCC_ClockConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80009b8:	f000 f96c 	bl	8000c94 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80009bc:	f003 ff26 	bl	800480c <HAL_RCCEx_EnableMSIPLLMode>
}
 80009c0:	bf00      	nop
 80009c2:	3758      	adds	r7, #88	@ 0x58
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40021000 	.word	0x40021000

080009cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a48 <MX_I2C1_Init+0x7c>)
 80009d2:	4a1e      	ldr	r2, [pc, #120]	@ (8000a4c <MX_I2C1_Init+0x80>)
 80009d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20000209;
 80009d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a48 <MX_I2C1_Init+0x7c>)
 80009d8:	4a1d      	ldr	r2, [pc, #116]	@ (8000a50 <MX_I2C1_Init+0x84>)
 80009da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a48 <MX_I2C1_Init+0x7c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e2:	4b19      	ldr	r3, [pc, #100]	@ (8000a48 <MX_I2C1_Init+0x7c>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009e8:	4b17      	ldr	r3, [pc, #92]	@ (8000a48 <MX_I2C1_Init+0x7c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009ee:	4b16      	ldr	r3, [pc, #88]	@ (8000a48 <MX_I2C1_Init+0x7c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009f4:	4b14      	ldr	r3, [pc, #80]	@ (8000a48 <MX_I2C1_Init+0x7c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009fa:	4b13      	ldr	r3, [pc, #76]	@ (8000a48 <MX_I2C1_Init+0x7c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a00:	4b11      	ldr	r3, [pc, #68]	@ (8000a48 <MX_I2C1_Init+0x7c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a06:	4810      	ldr	r0, [pc, #64]	@ (8000a48 <MX_I2C1_Init+0x7c>)
 8000a08:	f000 feee 	bl	80017e8 <HAL_I2C_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a12:	f000 f93f 	bl	8000c94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a16:	2100      	movs	r1, #0
 8000a18:	480b      	ldr	r0, [pc, #44]	@ (8000a48 <MX_I2C1_Init+0x7c>)
 8000a1a:	f002 fce2 	bl	80033e2 <HAL_I2CEx_ConfigAnalogFilter>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a24:	f000 f936 	bl	8000c94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4807      	ldr	r0, [pc, #28]	@ (8000a48 <MX_I2C1_Init+0x7c>)
 8000a2c:	f002 fd24 	bl	8003478 <HAL_I2CEx_ConfigDigitalFilter>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a36:	f000 f92d 	bl	8000c94 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8000a3a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000a3e:	f002 fd67 	bl	8003510 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	2000003c 	.word	0x2000003c
 8000a4c:	40005400 	.word	0x40005400
 8000a50:	20000209 	.word	0x20000209

08000a54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a58:	4b14      	ldr	r3, [pc, #80]	@ (8000aac <MX_USART1_UART_Init+0x58>)
 8000a5a:	4a15      	ldr	r2, [pc, #84]	@ (8000ab0 <MX_USART1_UART_Init+0x5c>)
 8000a5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	@ (8000aac <MX_USART1_UART_Init+0x58>)
 8000a60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <MX_USART1_UART_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000aac <MX_USART1_UART_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	@ (8000aac <MX_USART1_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <MX_USART1_UART_Init+0x58>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000aac <MX_USART1_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	4b09      	ldr	r3, [pc, #36]	@ (8000aac <MX_USART1_UART_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	@ (8000aac <MX_USART1_UART_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a90:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <MX_USART1_UART_Init+0x58>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	@ (8000aac <MX_USART1_UART_Init+0x58>)
 8000a98:	f004 f8e8 	bl	8004c6c <HAL_HalfDuplex_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000aa2:	f000 f8f7 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200000c0 	.word	0x200000c0
 8000ab0:	40013800 	.word	0x40013800

08000ab4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	@ (8000b0c <MX_USART2_UART_Init+0x58>)
 8000aba:	4a15      	ldr	r2, [pc, #84]	@ (8000b10 <MX_USART2_UART_Init+0x5c>)
 8000abc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000abe:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <MX_USART2_UART_Init+0x58>)
 8000ac0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ac4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <MX_USART2_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <MX_USART2_UART_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <MX_USART2_UART_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <MX_USART2_UART_Init+0x58>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	@ (8000b0c <MX_USART2_UART_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <MX_USART2_UART_Init+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aea:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <MX_USART2_UART_Init+0x58>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af0:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <MX_USART2_UART_Init+0x58>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000af6:	4805      	ldr	r0, [pc, #20]	@ (8000b0c <MX_USART2_UART_Init+0x58>)
 8000af8:	f004 f86a 	bl	8004bd0 <HAL_UART_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b02:	f000 f8c7 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000148 	.word	0x20000148
 8000b10:	40004400 	.word	0x40004400

08000b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	@ 0x28
 8000b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2a:	4b56      	ldr	r3, [pc, #344]	@ (8000c84 <MX_GPIO_Init+0x170>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2e:	4a55      	ldr	r2, [pc, #340]	@ (8000c84 <MX_GPIO_Init+0x170>)
 8000b30:	f043 0304 	orr.w	r3, r3, #4
 8000b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b36:	4b53      	ldr	r3, [pc, #332]	@ (8000c84 <MX_GPIO_Init+0x170>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3a:	f003 0304 	and.w	r3, r3, #4
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b42:	4b50      	ldr	r3, [pc, #320]	@ (8000c84 <MX_GPIO_Init+0x170>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b46:	4a4f      	ldr	r2, [pc, #316]	@ (8000c84 <MX_GPIO_Init+0x170>)
 8000b48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b4e:	4b4d      	ldr	r3, [pc, #308]	@ (8000c84 <MX_GPIO_Init+0x170>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	4b4a      	ldr	r3, [pc, #296]	@ (8000c84 <MX_GPIO_Init+0x170>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5e:	4a49      	ldr	r2, [pc, #292]	@ (8000c84 <MX_GPIO_Init+0x170>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b66:	4b47      	ldr	r3, [pc, #284]	@ (8000c84 <MX_GPIO_Init+0x170>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b72:	4b44      	ldr	r3, [pc, #272]	@ (8000c84 <MX_GPIO_Init+0x170>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b76:	4a43      	ldr	r2, [pc, #268]	@ (8000c84 <MX_GPIO_Init+0x170>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b7e:	4b41      	ldr	r3, [pc, #260]	@ (8000c84 <MX_GPIO_Init+0x170>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8a:	4b3e      	ldr	r3, [pc, #248]	@ (8000c84 <MX_GPIO_Init+0x170>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8e:	4a3d      	ldr	r2, [pc, #244]	@ (8000c84 <MX_GPIO_Init+0x170>)
 8000b90:	f043 0308 	orr.w	r3, r3, #8
 8000b94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b96:	4b3b      	ldr	r3, [pc, #236]	@ (8000c84 <MX_GPIO_Init+0x170>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9a:	f003 0308 	and.w	r3, r3, #8
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2120      	movs	r1, #32
 8000ba6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000baa:	f000 fde1 	bl	8001770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bb4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4830      	ldr	r0, [pc, #192]	@ (8000c88 <MX_GPIO_Init+0x174>)
 8000bc6:	f000 fc11 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000bca:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000bce:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	4619      	mov	r1, r3
 8000bde:	482a      	ldr	r0, [pc, #168]	@ (8000c88 <MX_GPIO_Init+0x174>)
 8000be0:	f000 fc04 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : ST25R_IRQ_Pin */
  GPIO_InitStruct.Pin = ST25R_IRQ_Pin;
 8000be4:	2301      	movs	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ST25R_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bfc:	f000 fbf6 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA6 PA7
                           PA8 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
 8000c00:	f649 53d2 	movw	r3, #40402	@ 0x9dd2
 8000c04:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c06:	2303      	movs	r3, #3
 8000c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c18:	f000 fbe8 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c1c:	2320      	movs	r3, #32
 8000c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c36:	f000 fbd9 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000c3a:	f64f 43f7 	movw	r3, #64759	@ 0xfcf7
 8000c3e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c40:	2303      	movs	r3, #3
 8000c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480f      	ldr	r0, [pc, #60]	@ (8000c8c <MX_GPIO_Init+0x178>)
 8000c50:	f000 fbcc 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c54:	2304      	movs	r3, #4
 8000c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4619      	mov	r1, r3
 8000c66:	480a      	ldr	r0, [pc, #40]	@ (8000c90 <MX_GPIO_Init+0x17c>)
 8000c68:	f000 fbc0 	bl	80013ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2101      	movs	r1, #1
 8000c70:	2006      	movs	r0, #6
 8000c72:	f000 fb36 	bl	80012e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c76:	2006      	movs	r0, #6
 8000c78:	f000 fb4f 	bl	800131a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c7c:	bf00      	nop
 8000c7e:	3728      	adds	r7, #40	@ 0x28
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40021000 	.word	0x40021000
 8000c88:	48000800 	.word	0x48000800
 8000c8c:	48000400 	.word	0x48000400
 8000c90:	48000c00 	.word	0x48000c00

08000c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c98:	b672      	cpsid	i
}
 8000c9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <Error_Handler+0x8>

08000ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce4 <HAL_MspInit+0x44>)
 8000ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000caa:	4a0e      	ldr	r2, [pc, #56]	@ (8000ce4 <HAL_MspInit+0x44>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <HAL_MspInit+0x44>)
 8000cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbe:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <HAL_MspInit+0x44>)
 8000cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc2:	4a08      	ldr	r2, [pc, #32]	@ (8000ce4 <HAL_MspInit+0x44>)
 8000cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <HAL_MspInit+0x44>)
 8000ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b0ac      	sub	sp, #176	@ 0xb0
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2288      	movs	r2, #136	@ 0x88
 8000d06:	2100      	movs	r1, #0
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f004 fcd2 	bl	80056b2 <memset>
  if(hi2c->Instance==I2C1)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a2f      	ldr	r2, [pc, #188]	@ (8000dd0 <HAL_I2C_MspInit+0xe8>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d157      	bne.n	8000dc8 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d18:	2340      	movs	r3, #64	@ 0x40
 8000d1a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4618      	mov	r0, r3
 8000d26:	f003 fa87 	bl	8004238 <HAL_RCCEx_PeriphCLKConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d30:	f7ff ffb0 	bl	8000c94 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d34:	4b27      	ldr	r3, [pc, #156]	@ (8000dd4 <HAL_I2C_MspInit+0xec>)
 8000d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d38:	4a26      	ldr	r2, [pc, #152]	@ (8000dd4 <HAL_I2C_MspInit+0xec>)
 8000d3a:	f043 0302 	orr.w	r3, r3, #2
 8000d3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d40:	4b24      	ldr	r3, [pc, #144]	@ (8000dd4 <HAL_I2C_MspInit+0xec>)
 8000d42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d44:	f003 0302 	and.w	r3, r3, #2
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d4c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d54:	2312      	movs	r3, #18
 8000d56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d60:	2303      	movs	r3, #3
 8000d62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d66:	2304      	movs	r3, #4
 8000d68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d70:	4619      	mov	r1, r3
 8000d72:	4819      	ldr	r0, [pc, #100]	@ (8000dd8 <HAL_I2C_MspInit+0xf0>)
 8000d74:	f000 fb3a 	bl	80013ec <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8000d78:	4b18      	ldr	r3, [pc, #96]	@ (8000ddc <HAL_I2C_MspInit+0xf4>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	4a17      	ldr	r2, [pc, #92]	@ (8000ddc <HAL_I2C_MspInit+0xf4>)
 8000d7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d82:	6053      	str	r3, [r2, #4]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8000d84:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <HAL_I2C_MspInit+0xf4>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	4a14      	ldr	r2, [pc, #80]	@ (8000ddc <HAL_I2C_MspInit+0xf4>)
 8000d8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d8e:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d90:	4b10      	ldr	r3, [pc, #64]	@ (8000dd4 <HAL_I2C_MspInit+0xec>)
 8000d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d94:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd4 <HAL_I2C_MspInit+0xec>)
 8000d96:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd4 <HAL_I2C_MspInit+0xec>)
 8000d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000da0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2100      	movs	r1, #0
 8000dac:	201f      	movs	r0, #31
 8000dae:	f000 fa98 	bl	80012e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000db2:	201f      	movs	r0, #31
 8000db4:	f000 fab1 	bl	800131a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2100      	movs	r1, #0
 8000dbc:	2020      	movs	r0, #32
 8000dbe:	f000 fa90 	bl	80012e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000dc2:	2020      	movs	r0, #32
 8000dc4:	f000 faa9 	bl	800131a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dc8:	bf00      	nop
 8000dca:	37b0      	adds	r7, #176	@ 0xb0
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40005400 	.word	0x40005400
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	48000400 	.word	0x48000400
 8000ddc:	40010000 	.word	0x40010000

08000de0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b0ae      	sub	sp, #184	@ 0xb8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	2288      	movs	r2, #136	@ 0x88
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f004 fc56 	bl	80056b2 <memset>
  if(huart->Instance==USART1)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a43      	ldr	r2, [pc, #268]	@ (8000f18 <HAL_UART_MspInit+0x138>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d13d      	bne.n	8000e8c <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e10:	2301      	movs	r3, #1
 8000e12:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e14:	2300      	movs	r3, #0
 8000e16:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e18:	f107 031c 	add.w	r3, r7, #28
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f003 fa0b 	bl	8004238 <HAL_RCCEx_PeriphCLKConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e28:	f7ff ff34 	bl	8000c94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e2c:	4b3b      	ldr	r3, [pc, #236]	@ (8000f1c <HAL_UART_MspInit+0x13c>)
 8000e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e30:	4a3a      	ldr	r2, [pc, #232]	@ (8000f1c <HAL_UART_MspInit+0x13c>)
 8000e32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e36:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e38:	4b38      	ldr	r3, [pc, #224]	@ (8000f1c <HAL_UART_MspInit+0x13c>)
 8000e3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e40:	61bb      	str	r3, [r7, #24]
 8000e42:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e44:	4b35      	ldr	r3, [pc, #212]	@ (8000f1c <HAL_UART_MspInit+0x13c>)
 8000e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e48:	4a34      	ldr	r2, [pc, #208]	@ (8000f1c <HAL_UART_MspInit+0x13c>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e50:	4b32      	ldr	r3, [pc, #200]	@ (8000f1c <HAL_UART_MspInit+0x13c>)
 8000e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e64:	2312      	movs	r3, #18
 8000e66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e76:	2307      	movs	r3, #7
 8000e78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e80:	4619      	mov	r1, r3
 8000e82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e86:	f000 fab1 	bl	80013ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e8a:	e040      	b.n	8000f0e <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a23      	ldr	r2, [pc, #140]	@ (8000f20 <HAL_UART_MspInit+0x140>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d13b      	bne.n	8000f0e <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e96:	2302      	movs	r3, #2
 8000e98:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f003 f9c8 	bl	8004238 <HAL_RCCEx_PeriphCLKConfig>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8000eae:	f7ff fef1 	bl	8000c94 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f1c <HAL_UART_MspInit+0x13c>)
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eb6:	4a19      	ldr	r2, [pc, #100]	@ (8000f1c <HAL_UART_MspInit+0x13c>)
 8000eb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ebc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ebe:	4b17      	ldr	r3, [pc, #92]	@ (8000f1c <HAL_UART_MspInit+0x13c>)
 8000ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	4b14      	ldr	r3, [pc, #80]	@ (8000f1c <HAL_UART_MspInit+0x13c>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ece:	4a13      	ldr	r2, [pc, #76]	@ (8000f1c <HAL_UART_MspInit+0x13c>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ed6:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <HAL_UART_MspInit+0x13c>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ee2:	230c      	movs	r3, #12
 8000ee4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000efa:	2307      	movs	r3, #7
 8000efc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f04:	4619      	mov	r1, r3
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f0a:	f000 fa6f 	bl	80013ec <HAL_GPIO_Init>
}
 8000f0e:	bf00      	nop
 8000f10:	37b8      	adds	r7, #184	@ 0xb8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40013800 	.word	0x40013800
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40004400 	.word	0x40004400

08000f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <NMI_Handler+0x4>

08000f2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <HardFault_Handler+0x4>

08000f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <MemManage_Handler+0x4>

08000f3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <BusFault_Handler+0x4>

08000f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <UsageFault_Handler+0x4>

08000f4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f7a:	f000 f8b7 	bl	80010ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ST25R_IRQ_Pin);
 8000f86:	2001      	movs	r0, #1
 8000f88:	f000 fc0a 	bl	80017a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  st25r3916Isr();
 8000f8c:	f7ff fbc0 	bl	8000710 <st25r3916Isr>
  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000f98:	4802      	ldr	r0, [pc, #8]	@ (8000fa4 <I2C1_EV_IRQHandler+0x10>)
 8000f9a:	f000 fe3f 	bl	8001c1c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	2000003c 	.word	0x2000003c

08000fa8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000fac:	4802      	ldr	r0, [pc, #8]	@ (8000fb8 <I2C1_ER_IRQHandler+0x10>)
 8000fae:	f000 fe4f 	bl	8001c50 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2000003c 	.word	0x2000003c

08000fbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fc0:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <SystemInit+0x20>)
 8000fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fc6:	4a05      	ldr	r2, [pc, #20]	@ (8000fdc <SystemInit+0x20>)
 8000fc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fe0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001018 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fe4:	f7ff ffea 	bl	8000fbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe8:	480c      	ldr	r0, [pc, #48]	@ (800101c <LoopForever+0x6>)
  ldr r1, =_edata
 8000fea:	490d      	ldr	r1, [pc, #52]	@ (8001020 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fec:	4a0d      	ldr	r2, [pc, #52]	@ (8001024 <LoopForever+0xe>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8001028 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001000:	4c0a      	ldr	r4, [pc, #40]	@ (800102c <LoopForever+0x16>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800100e:	f004 fb59 	bl	80056c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001012:	f7ff fc75 	bl	8000900 <main>

08001016 <LoopForever>:

LoopForever:
    b LoopForever
 8001016:	e7fe      	b.n	8001016 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001018:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800101c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001020:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001024:	0800577c 	.word	0x0800577c
  ldr r2, =_sbss
 8001028:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800102c:	200001d8 	.word	0x200001d8

08001030 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001030:	e7fe      	b.n	8001030 <ADC1_2_IRQHandler>
	...

08001034 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800103e:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <HAL_Init+0x3c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a0b      	ldr	r2, [pc, #44]	@ (8001070 <HAL_Init+0x3c>)
 8001044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001048:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104a:	2003      	movs	r0, #3
 800104c:	f000 f93e 	bl	80012cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001050:	2000      	movs	r0, #0
 8001052:	f000 f80f 	bl	8001074 <HAL_InitTick>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d002      	beq.n	8001062 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	71fb      	strb	r3, [r7, #7]
 8001060:	e001      	b.n	8001066 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001062:	f7ff fe1d 	bl	8000ca0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001066:	79fb      	ldrb	r3, [r7, #7]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40022000 	.word	0x40022000

08001074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800107c:	2300      	movs	r3, #0
 800107e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001080:	4b17      	ldr	r3, [pc, #92]	@ (80010e0 <HAL_InitTick+0x6c>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d023      	beq.n	80010d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001088:	4b16      	ldr	r3, [pc, #88]	@ (80010e4 <HAL_InitTick+0x70>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b14      	ldr	r3, [pc, #80]	@ (80010e0 <HAL_InitTick+0x6c>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001096:	fbb3 f3f1 	udiv	r3, r3, r1
 800109a:	fbb2 f3f3 	udiv	r3, r2, r3
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f949 	bl	8001336 <HAL_SYSTICK_Config>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d10f      	bne.n	80010ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	d809      	bhi.n	80010c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b0:	2200      	movs	r2, #0
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	f000 f913 	bl	80012e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010bc:	4a0a      	ldr	r2, [pc, #40]	@ (80010e8 <HAL_InitTick+0x74>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	e007      	b.n	80010d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	73fb      	strb	r3, [r7, #15]
 80010c8:	e004      	b.n	80010d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	73fb      	strb	r3, [r7, #15]
 80010ce:	e001      	b.n	80010d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000008 	.word	0x20000008
 80010e4:	20000000 	.word	0x20000000
 80010e8:	20000004 	.word	0x20000004

080010ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010f0:	4b06      	ldr	r3, [pc, #24]	@ (800110c <HAL_IncTick+0x20>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <HAL_IncTick+0x24>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	4a04      	ldr	r2, [pc, #16]	@ (8001110 <HAL_IncTick+0x24>)
 80010fe:	6013      	str	r3, [r2, #0]
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	20000008 	.word	0x20000008
 8001110:	200001d4 	.word	0x200001d4

08001114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return uwTick;
 8001118:	4b03      	ldr	r3, [pc, #12]	@ (8001128 <HAL_GetTick+0x14>)
 800111a:	681b      	ldr	r3, [r3, #0]
}
 800111c:	4618      	mov	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	200001d4 	.word	0x200001d4

0800112c <__NVIC_SetPriorityGrouping>:
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800113c:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <__NVIC_SetPriorityGrouping+0x44>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001148:	4013      	ands	r3, r2
 800114a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001154:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001158:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800115c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115e:	4a04      	ldr	r2, [pc, #16]	@ (8001170 <__NVIC_SetPriorityGrouping+0x44>)
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	60d3      	str	r3, [r2, #12]
}
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_GetPriorityGrouping>:
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001178:	4b04      	ldr	r3, [pc, #16]	@ (800118c <__NVIC_GetPriorityGrouping+0x18>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	0a1b      	lsrs	r3, r3, #8
 800117e:	f003 0307 	and.w	r3, r3, #7
}
 8001182:	4618      	mov	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_EnableIRQ>:
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	db0b      	blt.n	80011ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	f003 021f 	and.w	r2, r3, #31
 80011a8:	4907      	ldr	r1, [pc, #28]	@ (80011c8 <__NVIC_EnableIRQ+0x38>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	095b      	lsrs	r3, r3, #5
 80011b0:	2001      	movs	r0, #1
 80011b2:	fa00 f202 	lsl.w	r2, r0, r2
 80011b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000e100 	.word	0xe000e100

080011cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	db0a      	blt.n	80011f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	490c      	ldr	r1, [pc, #48]	@ (8001218 <__NVIC_SetPriority+0x4c>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	0112      	lsls	r2, r2, #4
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	440b      	add	r3, r1
 80011f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f4:	e00a      	b.n	800120c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4908      	ldr	r1, [pc, #32]	@ (800121c <__NVIC_SetPriority+0x50>)
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	f003 030f 	and.w	r3, r3, #15
 8001202:	3b04      	subs	r3, #4
 8001204:	0112      	lsls	r2, r2, #4
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	440b      	add	r3, r1
 800120a:	761a      	strb	r2, [r3, #24]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000e100 	.word	0xe000e100
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001220:	b480      	push	{r7}
 8001222:	b089      	sub	sp, #36	@ 0x24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f1c3 0307 	rsb	r3, r3, #7
 800123a:	2b04      	cmp	r3, #4
 800123c:	bf28      	it	cs
 800123e:	2304      	movcs	r3, #4
 8001240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3304      	adds	r3, #4
 8001246:	2b06      	cmp	r3, #6
 8001248:	d902      	bls.n	8001250 <NVIC_EncodePriority+0x30>
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3b03      	subs	r3, #3
 800124e:	e000      	b.n	8001252 <NVIC_EncodePriority+0x32>
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	f04f 32ff 	mov.w	r2, #4294967295
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43da      	mvns	r2, r3
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	401a      	ands	r2, r3
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001268:	f04f 31ff 	mov.w	r1, #4294967295
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	fa01 f303 	lsl.w	r3, r1, r3
 8001272:	43d9      	mvns	r1, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001278:	4313      	orrs	r3, r2
         );
}
 800127a:	4618      	mov	r0, r3
 800127c:	3724      	adds	r7, #36	@ 0x24
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3b01      	subs	r3, #1
 8001294:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001298:	d301      	bcc.n	800129e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800129a:	2301      	movs	r3, #1
 800129c:	e00f      	b.n	80012be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129e:	4a0a      	ldr	r2, [pc, #40]	@ (80012c8 <SysTick_Config+0x40>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a6:	210f      	movs	r1, #15
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ac:	f7ff ff8e 	bl	80011cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b0:	4b05      	ldr	r3, [pc, #20]	@ (80012c8 <SysTick_Config+0x40>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b6:	4b04      	ldr	r3, [pc, #16]	@ (80012c8 <SysTick_Config+0x40>)
 80012b8:	2207      	movs	r2, #7
 80012ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	e000e010 	.word	0xe000e010

080012cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ff29 	bl	800112c <__NVIC_SetPriorityGrouping>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4603      	mov	r3, r0
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012f4:	f7ff ff3e 	bl	8001174 <__NVIC_GetPriorityGrouping>
 80012f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	68b9      	ldr	r1, [r7, #8]
 80012fe:	6978      	ldr	r0, [r7, #20]
 8001300:	f7ff ff8e 	bl	8001220 <NVIC_EncodePriority>
 8001304:	4602      	mov	r2, r0
 8001306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff5d 	bl	80011cc <__NVIC_SetPriority>
}
 8001312:	bf00      	nop
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff31 	bl	8001190 <__NVIC_EnableIRQ>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ffa2 	bl	8001288 <SysTick_Config>
 8001344:	4603      	mov	r3, r0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b084      	sub	sp, #16
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d005      	beq.n	8001372 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2204      	movs	r2, #4
 800136a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	73fb      	strb	r3, [r7, #15]
 8001370:	e029      	b.n	80013c6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 020e 	bic.w	r2, r2, #14
 8001380:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f022 0201 	bic.w	r2, r2, #1
 8001390:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001396:	f003 021c 	and.w	r2, r3, #28
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139e:	2101      	movs	r1, #1
 80013a0:	fa01 f202 	lsl.w	r2, r1, r2
 80013a4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	4798      	blx	r3
    }
  }
  return status;
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013de:	b2db      	uxtb	r3, r3
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b087      	sub	sp, #28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013fa:	e17f      	b.n	80016fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	2101      	movs	r1, #1
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	fa01 f303 	lsl.w	r3, r1, r3
 8001408:	4013      	ands	r3, r2
 800140a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 8171 	beq.w	80016f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	2b01      	cmp	r3, #1
 800141e:	d005      	beq.n	800142c <HAL_GPIO_Init+0x40>
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d130      	bne.n	800148e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	2203      	movs	r2, #3
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4013      	ands	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	68da      	ldr	r2, [r3, #12]
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001462:	2201      	movs	r2, #1
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	091b      	lsrs	r3, r3, #4
 8001478:	f003 0201 	and.w	r2, r3, #1
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	2b03      	cmp	r3, #3
 8001498:	d118      	bne.n	80014cc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800149e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014a0:	2201      	movs	r2, #1
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	08db      	lsrs	r3, r3, #3
 80014b6:	f003 0201 	and.w	r2, r3, #1
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	d017      	beq.n	8001508 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4313      	orrs	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d123      	bne.n	800155c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	08da      	lsrs	r2, r3, #3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3208      	adds	r2, #8
 800151c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001520:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	220f      	movs	r2, #15
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	4313      	orrs	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	08da      	lsrs	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3208      	adds	r2, #8
 8001556:	6939      	ldr	r1, [r7, #16]
 8001558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4013      	ands	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0203 	and.w	r2, r3, #3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80ac 	beq.w	80016f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159e:	4b5f      	ldr	r3, [pc, #380]	@ (800171c <HAL_GPIO_Init+0x330>)
 80015a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015a2:	4a5e      	ldr	r2, [pc, #376]	@ (800171c <HAL_GPIO_Init+0x330>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80015aa:	4b5c      	ldr	r3, [pc, #368]	@ (800171c <HAL_GPIO_Init+0x330>)
 80015ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015b6:	4a5a      	ldr	r2, [pc, #360]	@ (8001720 <HAL_GPIO_Init+0x334>)
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	089b      	lsrs	r3, r3, #2
 80015bc:	3302      	adds	r3, #2
 80015be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	220f      	movs	r2, #15
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	4013      	ands	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015e0:	d025      	beq.n	800162e <HAL_GPIO_Init+0x242>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a4f      	ldr	r2, [pc, #316]	@ (8001724 <HAL_GPIO_Init+0x338>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d01f      	beq.n	800162a <HAL_GPIO_Init+0x23e>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a4e      	ldr	r2, [pc, #312]	@ (8001728 <HAL_GPIO_Init+0x33c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d019      	beq.n	8001626 <HAL_GPIO_Init+0x23a>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4d      	ldr	r2, [pc, #308]	@ (800172c <HAL_GPIO_Init+0x340>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d013      	beq.n	8001622 <HAL_GPIO_Init+0x236>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a4c      	ldr	r2, [pc, #304]	@ (8001730 <HAL_GPIO_Init+0x344>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d00d      	beq.n	800161e <HAL_GPIO_Init+0x232>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a4b      	ldr	r2, [pc, #300]	@ (8001734 <HAL_GPIO_Init+0x348>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d007      	beq.n	800161a <HAL_GPIO_Init+0x22e>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a4a      	ldr	r2, [pc, #296]	@ (8001738 <HAL_GPIO_Init+0x34c>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d101      	bne.n	8001616 <HAL_GPIO_Init+0x22a>
 8001612:	2306      	movs	r3, #6
 8001614:	e00c      	b.n	8001630 <HAL_GPIO_Init+0x244>
 8001616:	2307      	movs	r3, #7
 8001618:	e00a      	b.n	8001630 <HAL_GPIO_Init+0x244>
 800161a:	2305      	movs	r3, #5
 800161c:	e008      	b.n	8001630 <HAL_GPIO_Init+0x244>
 800161e:	2304      	movs	r3, #4
 8001620:	e006      	b.n	8001630 <HAL_GPIO_Init+0x244>
 8001622:	2303      	movs	r3, #3
 8001624:	e004      	b.n	8001630 <HAL_GPIO_Init+0x244>
 8001626:	2302      	movs	r3, #2
 8001628:	e002      	b.n	8001630 <HAL_GPIO_Init+0x244>
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <HAL_GPIO_Init+0x244>
 800162e:	2300      	movs	r3, #0
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	f002 0203 	and.w	r2, r2, #3
 8001636:	0092      	lsls	r2, r2, #2
 8001638:	4093      	lsls	r3, r2
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001640:	4937      	ldr	r1, [pc, #220]	@ (8001720 <HAL_GPIO_Init+0x334>)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	089b      	lsrs	r3, r3, #2
 8001646:	3302      	adds	r3, #2
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800164e:	4b3b      	ldr	r3, [pc, #236]	@ (800173c <HAL_GPIO_Init+0x350>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	43db      	mvns	r3, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4313      	orrs	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001672:	4a32      	ldr	r2, [pc, #200]	@ (800173c <HAL_GPIO_Init+0x350>)
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001678:	4b30      	ldr	r3, [pc, #192]	@ (800173c <HAL_GPIO_Init+0x350>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	43db      	mvns	r3, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4013      	ands	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800169c:	4a27      	ldr	r2, [pc, #156]	@ (800173c <HAL_GPIO_Init+0x350>)
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016a2:	4b26      	ldr	r3, [pc, #152]	@ (800173c <HAL_GPIO_Init+0x350>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4013      	ands	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016c6:	4a1d      	ldr	r2, [pc, #116]	@ (800173c <HAL_GPIO_Init+0x350>)
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	@ (800173c <HAL_GPIO_Init+0x350>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	43db      	mvns	r3, r3
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016f0:	4a12      	ldr	r2, [pc, #72]	@ (800173c <HAL_GPIO_Init+0x350>)
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	3301      	adds	r3, #1
 80016fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	fa22 f303 	lsr.w	r3, r2, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	f47f ae78 	bne.w	80013fc <HAL_GPIO_Init+0x10>
  }
}
 800170c:	bf00      	nop
 800170e:	bf00      	nop
 8001710:	371c      	adds	r7, #28
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40021000 	.word	0x40021000
 8001720:	40010000 	.word	0x40010000
 8001724:	48000400 	.word	0x48000400
 8001728:	48000800 	.word	0x48000800
 800172c:	48000c00 	.word	0x48000c00
 8001730:	48001000 	.word	0x48001000
 8001734:	48001400 	.word	0x48001400
 8001738:	48001800 	.word	0x48001800
 800173c:	40010400 	.word	0x40010400

08001740 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	691a      	ldr	r2, [r3, #16]
 8001750:	887b      	ldrh	r3, [r7, #2]
 8001752:	4013      	ands	r3, r2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d002      	beq.n	800175e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	e001      	b.n	8001762 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800175e:	2300      	movs	r3, #0
 8001760:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001762:	7bfb      	ldrb	r3, [r7, #15]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	807b      	strh	r3, [r7, #2]
 800177c:	4613      	mov	r3, r2
 800177e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001780:	787b      	ldrb	r3, [r7, #1]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001786:	887a      	ldrh	r2, [r7, #2]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800178c:	e002      	b.n	8001794 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800178e:	887a      	ldrh	r2, [r7, #2]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017aa:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017ac:	695a      	ldr	r2, [r3, #20]
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	4013      	ands	r3, r2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d006      	beq.n	80017c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017b6:	4a05      	ldr	r2, [pc, #20]	@ (80017cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017bc:	88fb      	ldrh	r3, [r7, #6]
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 f806 	bl	80017d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40010400 	.word	0x40010400

080017d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e0b3      	b.n	8001962 <HAL_I2C_Init+0x17a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d12c      	bne.n	8001860 <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a56      	ldr	r2, [pc, #344]	@ (800196c <HAL_I2C_Init+0x184>)
 8001812:	655a      	str	r2, [r3, #84]	@ 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a56      	ldr	r2, [pc, #344]	@ (8001970 <HAL_I2C_Init+0x188>)
 8001818:	659a      	str	r2, [r3, #88]	@ 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a55      	ldr	r2, [pc, #340]	@ (8001974 <HAL_I2C_Init+0x18c>)
 800181e:	65da      	str	r2, [r3, #92]	@ 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a55      	ldr	r2, [pc, #340]	@ (8001978 <HAL_I2C_Init+0x190>)
 8001824:	661a      	str	r2, [r3, #96]	@ 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a54      	ldr	r2, [pc, #336]	@ (800197c <HAL_I2C_Init+0x194>)
 800182a:	665a      	str	r2, [r3, #100]	@ 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a54      	ldr	r2, [pc, #336]	@ (8001980 <HAL_I2C_Init+0x198>)
 8001830:	669a      	str	r2, [r3, #104]	@ 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a53      	ldr	r2, [pc, #332]	@ (8001984 <HAL_I2C_Init+0x19c>)
 8001836:	66da      	str	r2, [r3, #108]	@ 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a53      	ldr	r2, [pc, #332]	@ (8001988 <HAL_I2C_Init+0x1a0>)
 800183c:	671a      	str	r2, [r3, #112]	@ 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a52      	ldr	r2, [pc, #328]	@ (800198c <HAL_I2C_Init+0x1a4>)
 8001842:	675a      	str	r2, [r3, #116]	@ 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a52      	ldr	r2, [pc, #328]	@ (8001990 <HAL_I2C_Init+0x1a8>)
 8001848:	679a      	str	r2, [r3, #120]	@ 0x78

    if (hi2c->MspInitCallback == NULL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800184e:	2b00      	cmp	r3, #0
 8001850:	d102      	bne.n	8001858 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a4f      	ldr	r2, [pc, #316]	@ (8001994 <HAL_I2C_Init+0x1ac>)
 8001856:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2224      	movs	r2, #36	@ 0x24
 8001864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 0201 	bic.w	r2, r2, #1
 8001876:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001884:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001894:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d107      	bne.n	80018ae <HAL_I2C_Init+0xc6>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	e006      	b.n	80018bc <HAL_I2C_Init+0xd4>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689a      	ldr	r2, [r3, #8]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80018ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d108      	bne.n	80018d6 <HAL_I2C_Init+0xee>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	e007      	b.n	80018e6 <HAL_I2C_Init+0xfe>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6812      	ldr	r2, [r2, #0]
 80018f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68da      	ldr	r2, [r3, #12]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001908:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691a      	ldr	r2, [r3, #16]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69d9      	ldr	r1, [r3, #28]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a1a      	ldr	r2, [r3, #32]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0201 	orr.w	r2, r2, #1
 8001942:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2220      	movs	r2, #32
 800194e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	08001d07 	.word	0x08001d07
 8001970:	08001d1b 	.word	0x08001d1b
 8001974:	08001d2f 	.word	0x08001d2f
 8001978:	08001d43 	.word	0x08001d43
 800197c:	08001d73 	.word	0x08001d73
 8001980:	08001d87 	.word	0x08001d87
 8001984:	08001d9b 	.word	0x08001d9b
 8001988:	08001daf 	.word	0x08001daf
 800198c:	08001dc3 	.word	0x08001dc3
 8001990:	08001d57 	.word	0x08001d57
 8001994:	08000ce9 	.word	0x08000ce9

08001998 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                 uint16_t Size, uint32_t XferOptions)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	@ 0x28
 800199c:	af02      	add	r7, sp, #8
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	607a      	str	r2, [r7, #4]
 80019a2:	461a      	mov	r2, r3
 80019a4:	460b      	mov	r3, r1
 80019a6:	817b      	strh	r3, [r7, #10]
 80019a8:	4613      	mov	r3, r2
 80019aa:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 80019ac:	4b57      	ldr	r3, [pc, #348]	@ (8001b0c <HAL_I2C_Master_Seq_Transmit_IT+0x174>)
 80019ae:	61bb      	str	r3, [r7, #24]
  uint32_t sizetoxfer = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b20      	cmp	r3, #32
 80019be:	f040 809f 	bne.w	8001b00 <HAL_I2C_Master_Seq_Transmit_IT+0x168>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d101      	bne.n	80019d0 <HAL_I2C_Master_Seq_Transmit_IT+0x38>
 80019cc:	2302      	movs	r3, #2
 80019ce:	e098      	b.n	8001b02 <HAL_I2C_Master_Seq_Transmit_IT+0x16a>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2221      	movs	r2, #33	@ 0x21
 80019dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2210      	movs	r2, #16
 80019e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2200      	movs	r2, #0
 80019ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	893a      	ldrh	r2, [r7, #8]
 80019f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = XferOptions;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4a43      	ldr	r2, [pc, #268]	@ (8001b10 <HAL_I2C_Master_Seq_Transmit_IT+0x178>)
 8001a04:	635a      	str	r2, [r3, #52]	@ 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	2bff      	cmp	r3, #255	@ 0xff
 8001a0e:	d906      	bls.n	8001a1e <HAL_I2C_Master_Seq_Transmit_IT+0x86>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	22ff      	movs	r2, #255	@ 0xff
 8001a14:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001a16:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a1a:	61fb      	str	r3, [r7, #28]
 8001a1c:	e007      	b.n	8001a2e <HAL_I2C_Master_Seq_Transmit_IT+0x96>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = hi2c->XferOptions;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a2c:	61fb      	str	r3, [r7, #28]
    }

    if ((hi2c->XferSize > 0U) && ((XferOptions == I2C_FIRST_FRAME) || \
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d021      	beq.n	8001a7a <HAL_I2C_Master_Seq_Transmit_IT+0xe2>
 8001a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_I2C_Master_Seq_Transmit_IT+0xac>
 8001a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001a42:	d11a      	bne.n	8001a7a <HAL_I2C_Master_Seq_Transmit_IT+0xe2>
                                  (XferOptions == I2C_FIRST_AND_LAST_FRAME)))
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a48:	781a      	ldrb	r2, [r3, #0]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a5e:	617b      	str	r3, [r7, #20]
      hi2c->XferCount--;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	3b01      	subs	r3, #1
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a72:	3b01      	subs	r3, #1
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	2b11      	cmp	r3, #17
 8001a80:	d10e      	bne.n	8001aa0 <HAL_I2C_Master_Seq_Transmit_IT+0x108>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 8001a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a84:	2baa      	cmp	r3, #170	@ 0xaa
 8001a86:	d003      	beq.n	8001a90 <HAL_I2C_Master_Seq_Transmit_IT+0xf8>
 8001a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a8a:	f5b3 4f2a 	cmp.w	r3, #43520	@ 0xaa00
 8001a8e:	d101      	bne.n	8001a94 <HAL_I2C_Master_Seq_Transmit_IT+0xfc>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <HAL_I2C_Master_Seq_Transmit_IT+0xfe>
 8001a94:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d102      	bne.n	8001aa0 <HAL_I2C_Master_Seq_Transmit_IT+0x108>
    {
      xferrequest = I2C_NO_STARTSTOP;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
 8001a9e:	e00a      	b.n	8001ab6 <HAL_I2C_Master_Seq_Transmit_IT+0x11e>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f001 fc83 	bl	80033ac <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	2bff      	cmp	r3, #255	@ 0xff
 8001aae:	d802      	bhi.n	8001ab6 <HAL_I2C_Master_Seq_Transmit_IT+0x11e>
      {
        xfermode = hi2c->XferOptions;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab4:	61fb      	str	r3, [r7, #28]
      }
    }

    /* Send Slave Address and set NBYTES to write */
    if ((XferOptions == I2C_FIRST_FRAME) || (XferOptions == I2C_FIRST_AND_LAST_FRAME))
 8001ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_I2C_Master_Seq_Transmit_IT+0x12c>
 8001abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001abe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ac2:	d109      	bne.n	8001ad8 <HAL_I2C_Master_Seq_Transmit_IT+0x140>
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, xfermode, xferrequest);
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	8979      	ldrh	r1, [r7, #10]
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f001 fb57 	bl	8003184 <I2C_TransferConfig>
 8001ad6:	e009      	b.n	8001aec <HAL_I2C_Master_Seq_Transmit_IT+0x154>
    }
    else
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	8979      	ldrh	r1, [r7, #10]
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f001 fb4c 	bl	8003184 <I2C_TransferConfig>
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
              process unlock */
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
       I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001af4:	2101      	movs	r1, #1
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f001 fb76 	bl	80031e8 <I2C_Enable_IRQ>

    return HAL_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	e000      	b.n	8001b02 <HAL_I2C_Master_Seq_Transmit_IT+0x16a>
  }
  else
  {
    return HAL_BUSY;
 8001b00:	2302      	movs	r3, #2
  }
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3720      	adds	r7, #32
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	80002000 	.word	0x80002000
 8001b10:	08001e0b 	.word	0x08001e0b

08001b14 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                uint16_t Size, uint32_t XferOptions)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af02      	add	r7, sp, #8
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	460b      	mov	r3, r1
 8001b22:	817b      	strh	r3, [r7, #10]
 8001b24:	4613      	mov	r3, r2
 8001b26:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 8001b28:	4b3a      	ldr	r3, [pc, #232]	@ (8001c14 <HAL_I2C_Master_Seq_Receive_IT+0x100>)
 8001b2a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b20      	cmp	r3, #32
 8001b36:	d167      	bne.n	8001c08 <HAL_I2C_Master_Seq_Receive_IT+0xf4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d101      	bne.n	8001b46 <HAL_I2C_Master_Seq_Receive_IT+0x32>
 8001b42:	2302      	movs	r3, #2
 8001b44:	e061      	b.n	8001c0a <HAL_I2C_Master_Seq_Receive_IT+0xf6>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2222      	movs	r2, #34	@ 0x22
 8001b52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2210      	movs	r2, #16
 8001b5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	893a      	ldrh	r2, [r7, #8]
 8001b6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = XferOptions;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6a3a      	ldr	r2, [r7, #32]
 8001b74:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4a27      	ldr	r2, [pc, #156]	@ (8001c18 <HAL_I2C_Master_Seq_Receive_IT+0x104>)
 8001b7a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	2bff      	cmp	r3, #255	@ 0xff
 8001b84:	d906      	bls.n	8001b94 <HAL_I2C_Master_Seq_Receive_IT+0x80>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	22ff      	movs	r2, #255	@ 0xff
 8001b8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001b8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	e007      	b.n	8001ba4 <HAL_I2C_Master_Seq_Receive_IT+0x90>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = hi2c->XferOptions;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba2:	617b      	str	r3, [r7, #20]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba8:	2b12      	cmp	r3, #18
 8001baa:	d10e      	bne.n	8001bca <HAL_I2C_Master_Seq_Receive_IT+0xb6>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	2baa      	cmp	r3, #170	@ 0xaa
 8001bb0:	d003      	beq.n	8001bba <HAL_I2C_Master_Seq_Receive_IT+0xa6>
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	f5b3 4f2a 	cmp.w	r3, #43520	@ 0xaa00
 8001bb8:	d101      	bne.n	8001bbe <HAL_I2C_Master_Seq_Receive_IT+0xaa>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <HAL_I2C_Master_Seq_Receive_IT+0xac>
 8001bbe:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d102      	bne.n	8001bca <HAL_I2C_Master_Seq_Receive_IT+0xb6>
    {
      xferrequest = I2C_NO_STARTSTOP;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	e00a      	b.n	8001be0 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f001 fbee 	bl	80033ac <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	2bff      	cmp	r3, #255	@ 0xff
 8001bd8:	d802      	bhi.n	8001be0 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
      {
        xfermode = hi2c->XferOptions;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bde:	617b      	str	r3, [r7, #20]
      }
    }

    /* Send Slave Address and set NBYTES to read */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	8979      	ldrh	r1, [r7, #10]
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f001 fac8 	bl	8003184 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001bfc:	2102      	movs	r1, #2
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f001 faf2 	bl	80031e8 <I2C_Enable_IRQ>

    return HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	e000      	b.n	8001c0a <HAL_I2C_Master_Seq_Receive_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8001c08:	2302      	movs	r3, #2
  }
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	80002400 	.word	0x80002400
 8001c18:	08001e0b 	.word	0x08001e0b

08001c1c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c40:	68ba      	ldr	r2, [r7, #8]
 8001c42:	68f9      	ldr	r1, [r7, #12]
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	4798      	blx	r3
  }
}
 8001c48:	bf00      	nop
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00f      	beq.n	8001c92 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00a      	beq.n	8001c92 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c80:	f043 0201 	orr.w	r2, r3, #1
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c90:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d00f      	beq.n	8001cbc <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00a      	beq.n	8001cbc <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001caa:	f043 0208 	orr.w	r2, r3, #8
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cba:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00f      	beq.n	8001ce6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00a      	beq.n	8001ce6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd4:	f043 0202 	orr.w	r2, r3, #2
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ce4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cea:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 030b 	and.w	r3, r3, #11
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001cf6:	68f9      	ldr	r1, [r7, #12]
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f001 f8e7 	bl	8002ecc <I2C_ITError>
  }
}
 8001cfe:	bf00      	nop
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	70fb      	strb	r3, [r7, #3]
 8001d62:	4613      	mov	r3, r2
 8001d64:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001de4:	b2db      	uxtb	r3, r3
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b088      	sub	sp, #32
 8001e0e:	af02      	add	r7, sp, #8
 8001e10:	60f8      	str	r0, [r7, #12]
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <I2C_Master_ISR_IT+0x1e>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e113      	b.n	8002050 <I2C_Master_ISR_IT+0x246>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f003 0310 	and.w	r3, r3, #16
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d012      	beq.n	8001e60 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00d      	beq.n	8001e60 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2210      	movs	r2, #16
 8001e4a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e50:	f043 0204 	orr.w	r2, r3, #4
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f001 f950 	bl	80030fe <I2C_Flush_TXDR>
 8001e5e:	e0e4      	b.n	800202a <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d022      	beq.n	8001eb0 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d01d      	beq.n	8001eb0 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	f023 0304 	bic.w	r3, r3, #4
 8001e7a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001eae:	e0bc      	b.n	800202a <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d128      	bne.n	8001f0c <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d023      	beq.n	8001f0c <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d01e      	beq.n	8001f0c <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 80a8 	beq.w	800202a <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ede:	781a      	ldrb	r2, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	3b01      	subs	r3, #1
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8001f0a:	e08e      	b.n	800202a <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d05c      	beq.n	8001fd0 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d057      	beq.n	8001fd0 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d040      	beq.n	8001fac <I2C_Master_ISR_IT+0x1a2>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d13c      	bne.n	8001fac <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f3e:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	2bff      	cmp	r3, #255	@ 0xff
 8001f48:	d90e      	bls.n	8001f68 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	22ff      	movs	r2, #255	@ 0xff
 8001f4e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	8a79      	ldrh	r1, [r7, #18]
 8001f58:	2300      	movs	r3, #0
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f001 f90f 	bl	8003184 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f66:	e032      	b.n	8001fce <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f76:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001f7a:	d00b      	beq.n	8001f94 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f80:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001f86:	8a79      	ldrh	r1, [r7, #18]
 8001f88:	2000      	movs	r0, #0
 8001f8a:	9000      	str	r0, [sp, #0]
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f001 f8f9 	bl	8003184 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f92:	e01c      	b.n	8001fce <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	8a79      	ldrh	r1, [r7, #18]
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f001 f8ed 	bl	8003184 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001faa:	e010      	b.n	8001fce <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001fba:	d003      	beq.n	8001fc4 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 fcaf 	bl	8002920 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fc2:	e032      	b.n	800202a <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001fc4:	2140      	movs	r1, #64	@ 0x40
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 ff80 	bl	8002ecc <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fcc:	e02d      	b.n	800202a <I2C_Master_ISR_IT+0x220>
 8001fce:	e02c      	b.n	800202a <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d027      	beq.n	800202a <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d022      	beq.n	800202a <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d119      	bne.n	8002022 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ffc:	d015      	beq.n	800202a <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002002:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002006:	d108      	bne.n	800201a <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002016:	605a      	str	r2, [r3, #4]
 8002018:	e007      	b.n	800202a <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f000 fc80 	bl	8002920 <I2C_ITMasterSeqCplt>
 8002020:	e003      	b.n	800202a <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002022:	2140      	movs	r1, #64	@ 0x40
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f000 ff51 	bl	8002ecc <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f003 0320 	and.w	r3, r3, #32
 8002030:	2b00      	cmp	r3, #0
 8002032:	d008      	beq.n	8002046 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800203e:	6979      	ldr	r1, [r7, #20]
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 fd0b 	bl	8002a5c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002068:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <I2C_Slave_ISR_IT+0x24>
 8002078:	2302      	movs	r3, #2
 800207a:	e0e1      	b.n	8002240 <I2C_Slave_ISR_IT+0x1e8>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	f003 0320 	and.w	r3, r3, #32
 800208a:	2b00      	cmp	r3, #0
 800208c:	d008      	beq.n	80020a0 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002098:	6939      	ldr	r1, [r7, #16]
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 fdaa 	bl	8002bf4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d04b      	beq.n	8002142 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d046      	beq.n	8002142 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d128      	bne.n	8002110 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b28      	cmp	r3, #40	@ 0x28
 80020c8:	d108      	bne.n	80020dc <I2C_Slave_ISR_IT+0x84>
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80020d0:	d104      	bne.n	80020dc <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80020d2:	6939      	ldr	r1, [r7, #16]
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f000 fea3 	bl	8002e20 <I2C_ITListenCplt>
 80020da:	e031      	b.n	8002140 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b29      	cmp	r3, #41	@ 0x29
 80020e6:	d10e      	bne.n	8002106 <I2C_Slave_ISR_IT+0xae>
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80020ee:	d00a      	beq.n	8002106 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2210      	movs	r2, #16
 80020f6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f001 f800 	bl	80030fe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 fc4d 	bl	800299e <I2C_ITSlaveSeqCplt>
 8002104:	e01c      	b.n	8002140 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2210      	movs	r2, #16
 800210c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800210e:	e08f      	b.n	8002230 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2210      	movs	r2, #16
 8002116:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211c:	f043 0204 	orr.w	r2, r3, #4
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <I2C_Slave_ISR_IT+0xda>
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002130:	d17e      	bne.n	8002230 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002136:	4619      	mov	r1, r3
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f000 fec7 	bl	8002ecc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800213e:	e077      	b.n	8002230 <I2C_Slave_ISR_IT+0x1d8>
 8002140:	e076      	b.n	8002230 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	d02f      	beq.n	80021ac <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002152:	2b00      	cmp	r3, #0
 8002154:	d02a      	beq.n	80021ac <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800215a:	b29b      	uxth	r3, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	d018      	beq.n	8002192 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002172:	1c5a      	adds	r2, r3, #1
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002188:	b29b      	uxth	r3, r3
 800218a:	3b01      	subs	r3, #1
 800218c:	b29a      	uxth	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002196:	b29b      	uxth	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	d14b      	bne.n	8002234 <I2C_Slave_ISR_IT+0x1dc>
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80021a2:	d047      	beq.n	8002234 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 fbfa 	bl	800299e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80021aa:	e043      	b.n	8002234 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d009      	beq.n	80021ca <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d004      	beq.n	80021ca <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80021c0:	6939      	ldr	r1, [r7, #16]
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 fb28 	bl	8002818 <I2C_ITAddrCplt>
 80021c8:	e035      	b.n	8002236 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d030      	beq.n	8002236 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d02b      	beq.n	8002236 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d018      	beq.n	800221a <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ec:	781a      	ldrb	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f8:	1c5a      	adds	r2, r3, #1
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002202:	b29b      	uxth	r3, r3
 8002204:	3b01      	subs	r3, #1
 8002206:	b29a      	uxth	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002210:	3b01      	subs	r3, #1
 8002212:	b29a      	uxth	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002218:	e00d      	b.n	8002236 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002220:	d002      	beq.n	8002228 <I2C_Slave_ISR_IT+0x1d0>
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d106      	bne.n	8002236 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f000 fbb8 	bl	800299e <I2C_ITSlaveSeqCplt>
 800222e:	e002      	b.n	8002236 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8002230:	bf00      	nop
 8002232:	e000      	b.n	8002236 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8002234:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af02      	add	r7, sp, #8
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800225a:	2b01      	cmp	r3, #1
 800225c:	d101      	bne.n	8002262 <I2C_Master_ISR_DMA+0x1a>
 800225e:	2302      	movs	r3, #2
 8002260:	e0d9      	b.n	8002416 <I2C_Master_ISR_DMA+0x1ce>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	f003 0310 	and.w	r3, r3, #16
 8002270:	2b00      	cmp	r3, #0
 8002272:	d016      	beq.n	80022a2 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800227a:	2b00      	cmp	r3, #0
 800227c:	d011      	beq.n	80022a2 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2210      	movs	r2, #16
 8002284:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228a:	f043 0204 	orr.w	r2, r3, #4
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002292:	2120      	movs	r1, #32
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 ffa7 	bl	80031e8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 ff2f 	bl	80030fe <I2C_Flush_TXDR>
 80022a0:	e0b4      	b.n	800240c <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d071      	beq.n	8002390 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d06c      	beq.n	8002390 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022c4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d04e      	beq.n	800236e <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022dc:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	2bff      	cmp	r3, #255	@ 0xff
 80022e6:	d906      	bls.n	80022f6 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	22ff      	movs	r2, #255	@ 0xff
 80022ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80022ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	e010      	b.n	8002318 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002304:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002308:	d003      	beq.n	8002312 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	e002      	b.n	8002318 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002312:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002316:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800231c:	b2da      	uxtb	r2, r3
 800231e:	8a79      	ldrh	r1, [r7, #18]
 8002320:	2300      	movs	r3, #0
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 ff2c 	bl	8003184 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	b29a      	uxth	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b22      	cmp	r3, #34	@ 0x22
 8002348:	d108      	bne.n	800235c <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002358:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800235a:	e057      	b.n	800240c <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800236a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800236c:	e04e      	b.n	800240c <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002378:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800237c:	d003      	beq.n	8002386 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 face 	bl	8002920 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002384:	e042      	b.n	800240c <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002386:	2140      	movs	r1, #64	@ 0x40
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f000 fd9f 	bl	8002ecc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800238e:	e03d      	b.n	800240c <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002396:	2b00      	cmp	r3, #0
 8002398:	d028      	beq.n	80023ec <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d023      	beq.n	80023ec <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d119      	bne.n	80023e2 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80023bc:	d025      	beq.n	800240a <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80023c6:	d108      	bne.n	80023da <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023d6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80023d8:	e017      	b.n	800240a <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 faa0 	bl	8002920 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80023e0:	e013      	b.n	800240a <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80023e2:	2140      	movs	r1, #64	@ 0x40
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 fd71 	bl	8002ecc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80023ea:	e00e      	b.n	800240a <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	f003 0320 	and.w	r3, r3, #32
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00a      	beq.n	800240c <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002400:	68b9      	ldr	r1, [r7, #8]
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 fb2a 	bl	8002a5c <I2C_ITMasterCplt>
 8002408:	e000      	b.n	800240c <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800240a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b088      	sub	sp, #32
 8002424:	af02      	add	r7, sp, #8
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800242c:	4b8d      	ldr	r3, [pc, #564]	@ (8002664 <I2C_Mem_ISR_DMA+0x244>)
 800242e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002436:	2b01      	cmp	r3, #1
 8002438:	d101      	bne.n	800243e <I2C_Mem_ISR_DMA+0x1e>
 800243a:	2302      	movs	r3, #2
 800243c:	e10e      	b.n	800265c <I2C_Mem_ISR_DMA+0x23c>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	2b00      	cmp	r3, #0
 800244e:	d016      	beq.n	800247e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002456:	2b00      	cmp	r3, #0
 8002458:	d011      	beq.n	800247e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2210      	movs	r2, #16
 8002460:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002466:	f043 0204 	orr.w	r2, r3, #4
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800246e:	2120      	movs	r1, #32
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 feb9 	bl	80031e8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 fe41 	bl	80030fe <I2C_Flush_TXDR>
 800247c:	e0e9      	b.n	8002652 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00e      	beq.n	80024a6 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800248e:	2b00      	cmp	r3, #0
 8002490:	d009      	beq.n	80024a6 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800249a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f04f 32ff 	mov.w	r2, #4294967295
 80024a2:	651a      	str	r2, [r3, #80]	@ 0x50
 80024a4:	e0d5      	b.n	8002652 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d05f      	beq.n	8002570 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d05a      	beq.n	8002570 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80024ba:	2101      	movs	r1, #1
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 ff17 	bl	80032f0 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80024c2:	2110      	movs	r1, #16
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 fe8f 	bl	80031e8 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d048      	beq.n	8002566 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d8:	b29b      	uxth	r3, r3
 80024da:	2bff      	cmp	r3, #255	@ 0xff
 80024dc:	d910      	bls.n	8002500 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	22ff      	movs	r2, #255	@ 0xff
 80024e2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e8:	b299      	uxth	r1, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	2300      	movs	r3, #0
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 fe43 	bl	8003184 <I2C_TransferConfig>
 80024fe:	e011      	b.n	8002524 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002504:	b29a      	uxth	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800250e:	b299      	uxth	r1, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002514:	b2da      	uxtb	r2, r3
 8002516:	2300      	movs	r3, #0
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 fe30 	bl	8003184 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	b29a      	uxth	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b22      	cmp	r3, #34	@ 0x22
 8002540:	d108      	bne.n	8002554 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002550:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002552:	e07e      	b.n	8002652 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002562:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002564:	e075      	b.n	8002652 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002566:	2140      	movs	r1, #64	@ 0x40
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 fcaf 	bl	8002ecc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800256e:	e070      	b.n	8002652 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002576:	2b00      	cmp	r3, #0
 8002578:	d05d      	beq.n	8002636 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002580:	2b00      	cmp	r3, #0
 8002582:	d058      	beq.n	8002636 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002584:	2101      	movs	r1, #1
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 feb2 	bl	80032f0 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800258c:	2110      	movs	r1, #16
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 fe2a 	bl	80031e8 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b22      	cmp	r3, #34	@ 0x22
 800259e:	d101      	bne.n	80025a4 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 80025a0:	4b31      	ldr	r3, [pc, #196]	@ (8002668 <I2C_Mem_ISR_DMA+0x248>)
 80025a2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	2bff      	cmp	r3, #255	@ 0xff
 80025ac:	d910      	bls.n	80025d0 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	22ff      	movs	r2, #255	@ 0xff
 80025b2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b8:	b299      	uxth	r1, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 fddb 	bl	8003184 <I2C_TransferConfig>
 80025ce:	e011      	b.n	80025f4 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025de:	b299      	uxth	r1, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 fdc8 	bl	8003184 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b22      	cmp	r3, #34	@ 0x22
 8002610:	d108      	bne.n	8002624 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002620:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002622:	e016      	b.n	8002652 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002632:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002634:	e00d      	b.n	8002652 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	f003 0320 	and.w	r3, r3, #32
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800264a:	68b9      	ldr	r1, [r7, #8]
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 fa05 	bl	8002a5c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	80002000 	.word	0x80002000
 8002668:	80002400 	.word	0x80002400

0800266c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b088      	sub	sp, #32
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800267c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <I2C_Slave_ISR_DMA+0x24>
 800268c:	2302      	movs	r3, #2
 800268e:	e0bf      	b.n	8002810 <I2C_Slave_ISR_DMA+0x1a4>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	f003 0320 	and.w	r3, r3, #32
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d008      	beq.n	80026b4 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 faa0 	bl	8002bf4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 8095 	beq.w	80027ea <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 808f 	beq.w	80027ea <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d104      	bne.n	80026e0 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d07d      	beq.n	80027dc <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00c      	beq.n	8002702 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d007      	beq.n	8002702 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 80026fe:	2301      	movs	r3, #1
 8002700:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00c      	beq.n	8002724 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d007      	beq.n	8002724 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8002720:	2301      	movs	r3, #1
 8002722:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d128      	bne.n	800277c <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b28      	cmp	r3, #40	@ 0x28
 8002734:	d108      	bne.n	8002748 <I2C_Slave_ISR_DMA+0xdc>
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800273c:	d104      	bne.n	8002748 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800273e:	68b9      	ldr	r1, [r7, #8]
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f000 fb6d 	bl	8002e20 <I2C_ITListenCplt>
 8002746:	e048      	b.n	80027da <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b29      	cmp	r3, #41	@ 0x29
 8002752:	d10e      	bne.n	8002772 <I2C_Slave_ISR_DMA+0x106>
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800275a:	d00a      	beq.n	8002772 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2210      	movs	r2, #16
 8002762:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 fcca 	bl	80030fe <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 f917 	bl	800299e <I2C_ITSlaveSeqCplt>
 8002770:	e033      	b.n	80027da <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2210      	movs	r2, #16
 8002778:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800277a:	e034      	b.n	80027e6 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2210      	movs	r2, #16
 8002782:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002788:	f043 0204 	orr.w	r2, r3, #4
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002796:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <I2C_Slave_ISR_DMA+0x13a>
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027a4:	d11f      	bne.n	80027e6 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80027a6:	7dfb      	ldrb	r3, [r7, #23]
 80027a8:	2b21      	cmp	r3, #33	@ 0x21
 80027aa:	d002      	beq.n	80027b2 <I2C_Slave_ISR_DMA+0x146>
 80027ac:	7dfb      	ldrb	r3, [r7, #23]
 80027ae:	2b29      	cmp	r3, #41	@ 0x29
 80027b0:	d103      	bne.n	80027ba <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2221      	movs	r2, #33	@ 0x21
 80027b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80027b8:	e008      	b.n	80027cc <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80027ba:	7dfb      	ldrb	r3, [r7, #23]
 80027bc:	2b22      	cmp	r3, #34	@ 0x22
 80027be:	d002      	beq.n	80027c6 <I2C_Slave_ISR_DMA+0x15a>
 80027c0:	7dfb      	ldrb	r3, [r7, #23]
 80027c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80027c4:	d102      	bne.n	80027cc <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2222      	movs	r2, #34	@ 0x22
 80027ca:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d0:	4619      	mov	r1, r3
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 fb7a 	bl	8002ecc <I2C_ITError>
      if (treatdmanack == 1U)
 80027d8:	e005      	b.n	80027e6 <I2C_Slave_ISR_DMA+0x17a>
 80027da:	e004      	b.n	80027e6 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2210      	movs	r2, #16
 80027e2:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80027e4:	e00f      	b.n	8002806 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 80027e6:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80027e8:	e00d      	b.n	8002806 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d008      	beq.n	8002806 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80027fe:	68b9      	ldr	r1, [r7, #8]
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 f809 	bl	8002818 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3720      	adds	r7, #32
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002828:	b2db      	uxtb	r3, r3
 800282a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800282e:	2b28      	cmp	r3, #40	@ 0x28
 8002830:	d16a      	bne.n	8002908 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	0c1b      	lsrs	r3, r3, #16
 800283a:	b2db      	uxtb	r3, r3
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	0c1b      	lsrs	r3, r3, #16
 800284a:	b29b      	uxth	r3, r3
 800284c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002850:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	b29b      	uxth	r3, r3
 800285a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800285e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	b29b      	uxth	r3, r3
 8002868:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800286c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d138      	bne.n	80028e8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002876:	897b      	ldrh	r3, [r7, #10]
 8002878:	09db      	lsrs	r3, r3, #7
 800287a:	b29a      	uxth	r2, r3
 800287c:	89bb      	ldrh	r3, [r7, #12]
 800287e:	4053      	eors	r3, r2
 8002880:	b29b      	uxth	r3, r3
 8002882:	f003 0306 	and.w	r3, r3, #6
 8002886:	2b00      	cmp	r3, #0
 8002888:	d11c      	bne.n	80028c4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800288a:	897b      	ldrh	r3, [r7, #10]
 800288c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800289c:	2b02      	cmp	r3, #2
 800289e:	d13b      	bne.n	8002918 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2208      	movs	r2, #8
 80028ac:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028ba:	89ba      	ldrh	r2, [r7, #12]
 80028bc:	7bf9      	ldrb	r1, [r7, #15]
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	4798      	blx	r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80028c2:	e029      	b.n	8002918 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80028c4:	893b      	ldrh	r3, [r7, #8]
 80028c6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80028c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 fd0f 	bl	80032f0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028de:	89ba      	ldrh	r2, [r7, #12]
 80028e0:	7bf9      	ldrb	r1, [r7, #15]
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	4798      	blx	r3
}
 80028e6:	e017      	b.n	8002918 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80028e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 fcff 	bl	80032f0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028fe:	89ba      	ldrh	r2, [r7, #12]
 8002900:	7bf9      	ldrb	r1, [r7, #15]
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	4798      	blx	r3
}
 8002906:	e007      	b.n	8002918 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2208      	movs	r2, #8
 800290e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002918:	bf00      	nop
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b21      	cmp	r3, #33	@ 0x21
 800293a:	d116      	bne.n	800296a <I2C_ITMasterSeqCplt+0x4a>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2211      	movs	r2, #17
 8002948:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002950:	2101      	movs	r1, #1
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 fccc 	bl	80032f0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	4798      	blx	r3
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002968:	e015      	b.n	8002996 <I2C_ITMasterSeqCplt+0x76>
    hi2c->State         = HAL_I2C_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2220      	movs	r2, #32
 800296e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2212      	movs	r2, #18
 8002976:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800297e:	2102      	movs	r1, #2
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 fcb5 	bl	80032f0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    hi2c->MasterRxCpltCallback(hi2c);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	4798      	blx	r3
}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b084      	sub	sp, #16
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	e00c      	b.n	80029ec <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d007      	beq.n	80029ec <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029ea:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b29      	cmp	r3, #41	@ 0x29
 80029f6:	d113      	bne.n	8002a20 <I2C_ITSlaveSeqCplt+0x82>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2228      	movs	r2, #40	@ 0x28
 80029fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2221      	movs	r2, #33	@ 0x21
 8002a04:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002a06:	2101      	movs	r1, #1
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 fc71 	bl	80032f0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	4798      	blx	r3
  }
  else
  {
    /* Nothing to do */
  }
}
 8002a1e:	e018      	b.n	8002a52 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a2a:	d112      	bne.n	8002a52 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2228      	movs	r2, #40	@ 0x28
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2222      	movs	r2, #34	@ 0x22
 8002a38:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002a3a:	2102      	movs	r1, #2
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 fc57 	bl	80032f0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	4798      	blx	r3
}
 8002a52:	bf00      	nop
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b21      	cmp	r3, #33	@ 0x21
 8002a7c:	d107      	bne.n	8002a8e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002a7e:	2101      	movs	r1, #1
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 fc35 	bl	80032f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2211      	movs	r2, #17
 8002a8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a8c:	e00c      	b.n	8002aa8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b22      	cmp	r3, #34	@ 0x22
 8002a98:	d106      	bne.n	8002aa8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002a9a:	2102      	movs	r1, #2
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 fc27 	bl	80032f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2212      	movs	r2, #18
 8002aa6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6859      	ldr	r1, [r3, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	4b4e      	ldr	r3, [pc, #312]	@ (8002bec <I2C_ITMasterCplt+0x190>)
 8002ab4:	400b      	ands	r3, r1
 8002ab6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a4b      	ldr	r2, [pc, #300]	@ (8002bf0 <I2C_ITMasterCplt+0x194>)
 8002ac2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f003 0310 	and.w	r3, r3, #16
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d009      	beq.n	8002ae2 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2210      	movs	r2, #16
 8002ad4:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ada:	f043 0204 	orr.w	r2, r3, #4
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b60      	cmp	r3, #96	@ 0x60
 8002aec:	d10a      	bne.n	8002b04 <I2C_ITMasterCplt+0xa8>
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002b02:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 fafa 	bl	80030fe <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b60      	cmp	r3, #96	@ 0x60
 8002b1a:	d002      	beq.n	8002b22 <I2C_ITMasterCplt+0xc6>
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d006      	beq.n	8002b30 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b26:	4619      	mov	r1, r3
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f9cf 	bl	8002ecc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002b2e:	e058      	b.n	8002be2 <I2C_ITMasterCplt+0x186>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b21      	cmp	r3, #33	@ 0x21
 8002b3a:	d126      	bne.n	8002b8a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b40      	cmp	r3, #64	@ 0x40
 8002b54:	d10c      	bne.n	8002b70 <I2C_ITMasterCplt+0x114>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      hi2c->MemTxCpltCallback(hi2c);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	4798      	blx	r3
}
 8002b6e:	e038      	b.n	8002be2 <I2C_ITMasterCplt+0x186>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      hi2c->MasterTxCpltCallback(hi2c);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	4798      	blx	r3
}
 8002b88:	e02b      	b.n	8002be2 <I2C_ITMasterCplt+0x186>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b22      	cmp	r3, #34	@ 0x22
 8002b94:	d125      	bne.n	8002be2 <I2C_ITMasterCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b40      	cmp	r3, #64	@ 0x40
 8002bae:	d10c      	bne.n	8002bca <I2C_ITMasterCplt+0x16e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      hi2c->MemRxCpltCallback(hi2c);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	4798      	blx	r3
}
 8002bc8:	e00b      	b.n	8002be2 <I2C_ITMasterCplt+0x186>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      hi2c->MasterRxCpltCallback(hi2c);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	4798      	blx	r3
}
 8002be2:	bf00      	nop
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	fe00e800 	.word	0xfe00e800
 8002bf0:	ffff0000 	.word	0xffff0000

08002bf4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c10:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2220      	movs	r2, #32
 8002c18:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	2b21      	cmp	r3, #33	@ 0x21
 8002c1e:	d002      	beq.n	8002c26 <I2C_ITSlaveCplt+0x32>
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
 8002c22:	2b29      	cmp	r3, #41	@ 0x29
 8002c24:	d108      	bne.n	8002c38 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002c26:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 fb60 	bl	80032f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2221      	movs	r2, #33	@ 0x21
 8002c34:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c36:	e019      	b.n	8002c6c <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	2b22      	cmp	r3, #34	@ 0x22
 8002c3c:	d002      	beq.n	8002c44 <I2C_ITSlaveCplt+0x50>
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
 8002c40:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c42:	d108      	bne.n	8002c56 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002c44:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 fb51 	bl	80032f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2222      	movs	r2, #34	@ 0x22
 8002c52:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c54:	e00a      	b.n	8002c6c <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	2b28      	cmp	r3, #40	@ 0x28
 8002c5a:	d107      	bne.n	8002c6c <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002c5c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 fb45 	bl	80032f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c7a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6859      	ldr	r1, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	4b64      	ldr	r3, [pc, #400]	@ (8002e18 <I2C_ITSlaveCplt+0x224>)
 8002c88:	400b      	ands	r3, r1
 8002c8a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 fa36 	bl	80030fe <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d013      	beq.n	8002cc4 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002caa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d01f      	beq.n	8002cf4 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002cc2:	e017      	b.n	8002cf4 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d012      	beq.n	8002cf4 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cdc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d006      	beq.n	8002cf4 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d020      	beq.n	8002d40 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f023 0304 	bic.w	r3, r3, #4
 8002d04:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00c      	beq.n	8002d40 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4e:	f043 0204 	orr.w	r2, r3, #4
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d010      	beq.n	8002d8e <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d70:	4619      	mov	r1, r3
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f8aa 	bl	8002ecc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b28      	cmp	r3, #40	@ 0x28
 8002d82:	d144      	bne.n	8002e0e <I2C_ITSlaveCplt+0x21a>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002d84:	6979      	ldr	r1, [r7, #20]
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f84a 	bl	8002e20 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d8c:	e03f      	b.n	8002e0e <I2C_ITSlaveCplt+0x21a>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d92:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d96:	d015      	beq.n	8002dc4 <I2C_ITSlaveCplt+0x1d0>
    I2C_ITSlaveSeqCplt(hi2c);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff fe00 	bl	800299e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a1e      	ldr	r2, [pc, #120]	@ (8002e1c <I2C_ITSlaveCplt+0x228>)
 8002da2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    hi2c->ListenCpltCallback(hi2c);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	4798      	blx	r3
}
 8002dc2:	e024      	b.n	8002e0e <I2C_ITSlaveCplt+0x21a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b22      	cmp	r3, #34	@ 0x22
 8002dce:	d10f      	bne.n	8002df0 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	4798      	blx	r3
}
 8002dee:	e00e      	b.n	8002e0e <I2C_ITSlaveCplt+0x21a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2220      	movs	r2, #32
 8002df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    hi2c->SlaveTxCpltCallback(hi2c);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	4798      	blx	r3
}
 8002e0e:	bf00      	nop
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	fe00e800 	.word	0xfe00e800
 8002e1c:	ffff0000 	.word	0xffff0000

08002e20 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a26      	ldr	r2, [pc, #152]	@ (8002ec8 <I2C_ITListenCplt+0xa8>)
 8002e2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d022      	beq.n	8002e9c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e68:	1c5a      	adds	r2, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d012      	beq.n	8002e9c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e94:	f043 0204 	orr.w	r2, r3, #4
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e9c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 fa25 	bl	80032f0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2210      	movs	r2, #16
 8002eac:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	4798      	blx	r3
#else
  HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002ebe:	bf00      	nop
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	ffff0000 	.word	0xffff0000

08002ecc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002edc:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a6d      	ldr	r2, [pc, #436]	@ (80030a0 <I2C_ITError+0x1d4>)
 8002eea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
 8002f00:	2b28      	cmp	r3, #40	@ 0x28
 8002f02:	d005      	beq.n	8002f10 <I2C_ITError+0x44>
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	2b29      	cmp	r3, #41	@ 0x29
 8002f08:	d002      	beq.n	8002f10 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f0e:	d10b      	bne.n	8002f28 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002f10:	2103      	movs	r1, #3
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f9ec 	bl	80032f0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2228      	movs	r2, #40	@ 0x28
 8002f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a60      	ldr	r2, [pc, #384]	@ (80030a4 <I2C_ITError+0x1d8>)
 8002f24:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f26:	e030      	b.n	8002f8a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002f28:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f9df 	bl	80032f0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f8e3 	bl	80030fe <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b60      	cmp	r3, #96	@ 0x60
 8002f42:	d01f      	beq.n	8002f84 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	f003 0320 	and.w	r3, r3, #32
 8002f56:	2b20      	cmp	r3, #32
 8002f58:	d114      	bne.n	8002f84 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	f003 0310 	and.w	r3, r3, #16
 8002f64:	2b10      	cmp	r3, #16
 8002f66:	d109      	bne.n	8002f7c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2210      	movs	r2, #16
 8002f6e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f74:	f043 0204 	orr.w	r2, r3, #4
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2220      	movs	r2, #32
 8002f82:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d039      	beq.n	800300c <I2C_ITError+0x140>
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b11      	cmp	r3, #17
 8002f9c:	d002      	beq.n	8002fa4 <I2C_ITError+0xd8>
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b21      	cmp	r3, #33	@ 0x21
 8002fa2:	d133      	bne.n	800300c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fb2:	d107      	bne.n	8002fc4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002fc2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7fe fa01 	bl	80013d0 <HAL_DMA_GetState>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d017      	beq.n	8003004 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd8:	4a33      	ldr	r2, [pc, #204]	@ (80030a8 <I2C_ITError+0x1dc>)
 8002fda:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fe f9b0 	bl	800134e <HAL_DMA_Abort_IT>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d04d      	beq.n	8003090 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ffe:	4610      	mov	r0, r2
 8003000:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003002:	e045      	b.n	8003090 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f851 	bl	80030ac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800300a:	e041      	b.n	8003090 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003010:	2b00      	cmp	r3, #0
 8003012:	d039      	beq.n	8003088 <I2C_ITError+0x1bc>
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b12      	cmp	r3, #18
 8003018:	d002      	beq.n	8003020 <I2C_ITError+0x154>
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	2b22      	cmp	r3, #34	@ 0x22
 800301e:	d133      	bne.n	8003088 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800302a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800302e:	d107      	bne.n	8003040 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800303e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003044:	4618      	mov	r0, r3
 8003046:	f7fe f9c3 	bl	80013d0 <HAL_DMA_GetState>
 800304a:	4603      	mov	r3, r0
 800304c:	2b01      	cmp	r3, #1
 800304e:	d017      	beq.n	8003080 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003054:	4a14      	ldr	r2, [pc, #80]	@ (80030a8 <I2C_ITError+0x1dc>)
 8003056:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003064:	4618      	mov	r0, r3
 8003066:	f7fe f972 	bl	800134e <HAL_DMA_Abort_IT>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d011      	beq.n	8003094 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800307a:	4610      	mov	r0, r2
 800307c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800307e:	e009      	b.n	8003094 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f813 	bl	80030ac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003086:	e005      	b.n	8003094 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f80f 	bl	80030ac <I2C_TreatErrorCallback>
  }
}
 800308e:	e002      	b.n	8003096 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003090:	bf00      	nop
 8003092:	e000      	b.n	8003096 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003094:	bf00      	nop
}
 8003096:	bf00      	nop
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	ffff0000 	.word	0xffff0000
 80030a4:	08002059 	.word	0x08002059
 80030a8:	08003147 	.word	0x08003147

080030ac <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b60      	cmp	r3, #96	@ 0x60
 80030be:	d10f      	bne.n	80030e0 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80030de:	e00a      	b.n	80030f6 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    hi2c->ErrorCallback(hi2c);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	4798      	blx	r3
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b02      	cmp	r3, #2
 8003112:	d103      	bne.n	800311c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2200      	movs	r2, #0
 800311a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b01      	cmp	r3, #1
 8003128:	d007      	beq.n	800313a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	699a      	ldr	r2, [r3, #24]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f042 0201 	orr.w	r2, r2, #1
 8003138:	619a      	str	r2, [r3, #24]
  }
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003152:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003160:	2200      	movs	r2, #0
 8003162:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003170:	2200      	movs	r2, #0
 8003172:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f7ff ff99 	bl	80030ac <I2C_TreatErrorCallback>
}
 800317a:	bf00      	nop
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
	...

08003184 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	607b      	str	r3, [r7, #4]
 800318e:	460b      	mov	r3, r1
 8003190:	817b      	strh	r3, [r7, #10]
 8003192:	4613      	mov	r3, r2
 8003194:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003196:	897b      	ldrh	r3, [r7, #10]
 8003198:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800319c:	7a7b      	ldrb	r3, [r7, #9]
 800319e:	041b      	lsls	r3, r3, #16
 80031a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031a4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80031b2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	0d5b      	lsrs	r3, r3, #21
 80031be:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80031c2:	4b08      	ldr	r3, [pc, #32]	@ (80031e4 <I2C_TransferConfig+0x60>)
 80031c4:	430b      	orrs	r3, r1
 80031c6:	43db      	mvns	r3, r3
 80031c8:	ea02 0103 	and.w	r1, r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80031d6:	bf00      	nop
 80031d8:	371c      	adds	r7, #28
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	03ff63ff 	.word	0x03ff63ff

080031e8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	460b      	mov	r3, r1
 80031f2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031fc:	4a39      	ldr	r2, [pc, #228]	@ (80032e4 <I2C_Enable_IRQ+0xfc>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d032      	beq.n	8003268 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003206:	4a38      	ldr	r2, [pc, #224]	@ (80032e8 <I2C_Enable_IRQ+0x100>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d02d      	beq.n	8003268 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003210:	4a36      	ldr	r2, [pc, #216]	@ (80032ec <I2C_Enable_IRQ+0x104>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d028      	beq.n	8003268 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003216:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800321a:	2b00      	cmp	r3, #0
 800321c:	da03      	bge.n	8003226 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003224:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003226:	887b      	ldrh	r3, [r7, #2]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003236:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003238:	887b      	ldrh	r3, [r7, #2]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8003248:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800324a:	887b      	ldrh	r3, [r7, #2]
 800324c:	2b10      	cmp	r3, #16
 800324e:	d103      	bne.n	8003258 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003256:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003258:	887b      	ldrh	r3, [r7, #2]
 800325a:	2b20      	cmp	r3, #32
 800325c:	d133      	bne.n	80032c6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f043 0320 	orr.w	r3, r3, #32
 8003264:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003266:	e02e      	b.n	80032c6 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003268:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800326c:	2b00      	cmp	r3, #0
 800326e:	da03      	bge.n	8003278 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003276:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003278:	887b      	ldrh	r3, [r7, #2]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003288:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800328a:	887b      	ldrh	r3, [r7, #2]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800329a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800329c:	887b      	ldrh	r3, [r7, #2]
 800329e:	2b10      	cmp	r3, #16
 80032a0:	d103      	bne.n	80032aa <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80032a8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80032aa:	887b      	ldrh	r3, [r7, #2]
 80032ac:	2b20      	cmp	r3, #32
 80032ae:	d103      	bne.n	80032b8 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80032b6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80032b8:	887b      	ldrh	r3, [r7, #2]
 80032ba:	2b40      	cmp	r3, #64	@ 0x40
 80032bc:	d103      	bne.n	80032c6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032c4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6819      	ldr	r1, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	601a      	str	r2, [r3, #0]
}
 80032d6:	bf00      	nop
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	08002249 	.word	0x08002249
 80032e8:	0800266d 	.word	0x0800266d
 80032ec:	08002421 	.word	0x08002421

080032f0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	460b      	mov	r3, r1
 80032fa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003300:	887b      	ldrh	r3, [r7, #2]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00f      	beq.n	800332a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003310:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003318:	b2db      	uxtb	r3, r3
 800331a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800331e:	2b28      	cmp	r3, #40	@ 0x28
 8003320:	d003      	beq.n	800332a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003328:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800332a:	887b      	ldrh	r3, [r7, #2]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00f      	beq.n	8003354 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800333a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003342:	b2db      	uxtb	r3, r3
 8003344:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003348:	2b28      	cmp	r3, #40	@ 0x28
 800334a:	d003      	beq.n	8003354 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003352:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003354:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003358:	2b00      	cmp	r3, #0
 800335a:	da03      	bge.n	8003364 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003362:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003364:	887b      	ldrh	r3, [r7, #2]
 8003366:	2b10      	cmp	r3, #16
 8003368:	d103      	bne.n	8003372 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003370:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003372:	887b      	ldrh	r3, [r7, #2]
 8003374:	2b20      	cmp	r3, #32
 8003376:	d103      	bne.n	8003380 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f043 0320 	orr.w	r3, r3, #32
 800337e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003380:	887b      	ldrh	r3, [r7, #2]
 8003382:	2b40      	cmp	r3, #64	@ 0x40
 8003384:	d103      	bne.n	800338e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800338c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6819      	ldr	r1, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	43da      	mvns	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	400a      	ands	r2, r1
 800339e:	601a      	str	r2, [r3, #0]
}
 80033a0:	bf00      	nop
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b8:	2baa      	cmp	r3, #170	@ 0xaa
 80033ba:	d103      	bne.n	80033c4 <I2C_ConvertOtherXferOptions+0x18>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80033c2:	e008      	b.n	80033d6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c8:	f5b3 4f2a 	cmp.w	r3, #43520	@ 0xaa00
 80033cc:	d103      	bne.n	80033d6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033d4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b20      	cmp	r3, #32
 80033f6:	d138      	bne.n	800346a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d101      	bne.n	8003406 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003402:	2302      	movs	r3, #2
 8003404:	e032      	b.n	800346c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2224      	movs	r2, #36	@ 0x24
 8003412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0201 	bic.w	r2, r2, #1
 8003424:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003434:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6819      	ldr	r1, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f042 0201 	orr.w	r2, r2, #1
 8003454:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2220      	movs	r2, #32
 800345a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	e000      	b.n	800346c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800346a:	2302      	movs	r3, #2
  }
}
 800346c:	4618      	mov	r0, r3
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b20      	cmp	r3, #32
 800348c:	d139      	bne.n	8003502 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003498:	2302      	movs	r3, #2
 800349a:	e033      	b.n	8003504 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2224      	movs	r2, #36	@ 0x24
 80034a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0201 	bic.w	r2, r2, #1
 80034ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80034ca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	021b      	lsls	r3, r3, #8
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0201 	orr.w	r2, r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	e000      	b.n	8003504 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003502:	2302      	movs	r3, #2
  }
}
 8003504:	4618      	mov	r0, r3
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003518:	4b0b      	ldr	r3, [pc, #44]	@ (8003548 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800351a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800351c:	4a0a      	ldr	r2, [pc, #40]	@ (8003548 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800351e:	f043 0301 	orr.w	r3, r3, #1
 8003522:	6613      	str	r3, [r2, #96]	@ 0x60
 8003524:	4b08      	ldr	r3, [pc, #32]	@ (8003548 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8003526:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8003530:	4b06      	ldr	r3, [pc, #24]	@ (800354c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	4905      	ldr	r1, [pc, #20]	@ (800354c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4313      	orrs	r3, r2
 800353a:	604b      	str	r3, [r1, #4]
}
 800353c:	bf00      	nop
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	40021000 	.word	0x40021000
 800354c:	40010000 	.word	0x40010000

08003550 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003554:	4b05      	ldr	r3, [pc, #20]	@ (800356c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a04      	ldr	r2, [pc, #16]	@ (800356c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800355a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800355e:	6013      	str	r3, [r2, #0]
}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	40007000 	.word	0x40007000

08003570 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003574:	4b04      	ldr	r3, [pc, #16]	@ (8003588 <HAL_PWREx_GetVoltageRange+0x18>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800357c:	4618      	mov	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40007000 	.word	0x40007000

0800358c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800359a:	d130      	bne.n	80035fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800359c:	4b23      	ldr	r3, [pc, #140]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80035a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035a8:	d038      	beq.n	800361c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035aa:	4b20      	ldr	r3, [pc, #128]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80035b2:	4a1e      	ldr	r2, [pc, #120]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003630 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2232      	movs	r2, #50	@ 0x32
 80035c0:	fb02 f303 	mul.w	r3, r2, r3
 80035c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003634 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80035c6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ca:	0c9b      	lsrs	r3, r3, #18
 80035cc:	3301      	adds	r3, #1
 80035ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035d0:	e002      	b.n	80035d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	3b01      	subs	r3, #1
 80035d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035d8:	4b14      	ldr	r3, [pc, #80]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035e4:	d102      	bne.n	80035ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1f2      	bne.n	80035d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035ec:	4b0f      	ldr	r3, [pc, #60]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035f8:	d110      	bne.n	800361c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e00f      	b.n	800361e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80035fe:	4b0b      	ldr	r3, [pc, #44]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003606:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800360a:	d007      	beq.n	800361c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800360c:	4b07      	ldr	r3, [pc, #28]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003614:	4a05      	ldr	r2, [pc, #20]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003616:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800361a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40007000 	.word	0x40007000
 8003630:	20000000 	.word	0x20000000
 8003634:	431bde83 	.word	0x431bde83

08003638 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b088      	sub	sp, #32
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e3ca      	b.n	8003de0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800364a:	4b97      	ldr	r3, [pc, #604]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 030c 	and.w	r3, r3, #12
 8003652:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003654:	4b94      	ldr	r3, [pc, #592]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f003 0303 	and.w	r3, r3, #3
 800365c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0310 	and.w	r3, r3, #16
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 80e4 	beq.w	8003834 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d007      	beq.n	8003682 <HAL_RCC_OscConfig+0x4a>
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	2b0c      	cmp	r3, #12
 8003676:	f040 808b 	bne.w	8003790 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2b01      	cmp	r3, #1
 800367e:	f040 8087 	bne.w	8003790 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003682:	4b89      	ldr	r3, [pc, #548]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d005      	beq.n	800369a <HAL_RCC_OscConfig+0x62>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e3a2      	b.n	8003de0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1a      	ldr	r2, [r3, #32]
 800369e:	4b82      	ldr	r3, [pc, #520]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d004      	beq.n	80036b4 <HAL_RCC_OscConfig+0x7c>
 80036aa:	4b7f      	ldr	r3, [pc, #508]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036b2:	e005      	b.n	80036c0 <HAL_RCC_OscConfig+0x88>
 80036b4:	4b7c      	ldr	r3, [pc, #496]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 80036b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036ba:	091b      	lsrs	r3, r3, #4
 80036bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d223      	bcs.n	800370c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 fd55 	bl	8004178 <RCC_SetFlashLatencyFromMSIRange>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e383      	b.n	8003de0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036d8:	4b73      	ldr	r3, [pc, #460]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a72      	ldr	r2, [pc, #456]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 80036de:	f043 0308 	orr.w	r3, r3, #8
 80036e2:	6013      	str	r3, [r2, #0]
 80036e4:	4b70      	ldr	r3, [pc, #448]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	496d      	ldr	r1, [pc, #436]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036f6:	4b6c      	ldr	r3, [pc, #432]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	021b      	lsls	r3, r3, #8
 8003704:	4968      	ldr	r1, [pc, #416]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 8003706:	4313      	orrs	r3, r2
 8003708:	604b      	str	r3, [r1, #4]
 800370a:	e025      	b.n	8003758 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800370c:	4b66      	ldr	r3, [pc, #408]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a65      	ldr	r2, [pc, #404]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 8003712:	f043 0308 	orr.w	r3, r3, #8
 8003716:	6013      	str	r3, [r2, #0]
 8003718:	4b63      	ldr	r3, [pc, #396]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	4960      	ldr	r1, [pc, #384]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 8003726:	4313      	orrs	r3, r2
 8003728:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800372a:	4b5f      	ldr	r3, [pc, #380]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	021b      	lsls	r3, r3, #8
 8003738:	495b      	ldr	r1, [pc, #364]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 800373a:	4313      	orrs	r3, r2
 800373c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d109      	bne.n	8003758 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	4618      	mov	r0, r3
 800374a:	f000 fd15 	bl	8004178 <RCC_SetFlashLatencyFromMSIRange>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e343      	b.n	8003de0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003758:	f000 fc4a 	bl	8003ff0 <HAL_RCC_GetSysClockFreq>
 800375c:	4602      	mov	r2, r0
 800375e:	4b52      	ldr	r3, [pc, #328]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	091b      	lsrs	r3, r3, #4
 8003764:	f003 030f 	and.w	r3, r3, #15
 8003768:	4950      	ldr	r1, [pc, #320]	@ (80038ac <HAL_RCC_OscConfig+0x274>)
 800376a:	5ccb      	ldrb	r3, [r1, r3]
 800376c:	f003 031f 	and.w	r3, r3, #31
 8003770:	fa22 f303 	lsr.w	r3, r2, r3
 8003774:	4a4e      	ldr	r2, [pc, #312]	@ (80038b0 <HAL_RCC_OscConfig+0x278>)
 8003776:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003778:	4b4e      	ldr	r3, [pc, #312]	@ (80038b4 <HAL_RCC_OscConfig+0x27c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f7fd fc79 	bl	8001074 <HAL_InitTick>
 8003782:	4603      	mov	r3, r0
 8003784:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003786:	7bfb      	ldrb	r3, [r7, #15]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d052      	beq.n	8003832 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800378c:	7bfb      	ldrb	r3, [r7, #15]
 800378e:	e327      	b.n	8003de0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d032      	beq.n	80037fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003798:	4b43      	ldr	r3, [pc, #268]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a42      	ldr	r2, [pc, #264]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 800379e:	f043 0301 	orr.w	r3, r3, #1
 80037a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037a4:	f7fd fcb6 	bl	8001114 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037ac:	f7fd fcb2 	bl	8001114 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e310      	b.n	8003de0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037be:	4b3a      	ldr	r3, [pc, #232]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0f0      	beq.n	80037ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037ca:	4b37      	ldr	r3, [pc, #220]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a36      	ldr	r2, [pc, #216]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 80037d0:	f043 0308 	orr.w	r3, r3, #8
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	4b34      	ldr	r3, [pc, #208]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	4931      	ldr	r1, [pc, #196]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037e8:	4b2f      	ldr	r3, [pc, #188]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	021b      	lsls	r3, r3, #8
 80037f6:	492c      	ldr	r1, [pc, #176]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]
 80037fc:	e01a      	b.n	8003834 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80037fe:	4b2a      	ldr	r3, [pc, #168]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a29      	ldr	r2, [pc, #164]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 8003804:	f023 0301 	bic.w	r3, r3, #1
 8003808:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800380a:	f7fd fc83 	bl	8001114 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003812:	f7fd fc7f 	bl	8001114 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e2dd      	b.n	8003de0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003824:	4b20      	ldr	r3, [pc, #128]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1f0      	bne.n	8003812 <HAL_RCC_OscConfig+0x1da>
 8003830:	e000      	b.n	8003834 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003832:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d074      	beq.n	800392a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	2b08      	cmp	r3, #8
 8003844:	d005      	beq.n	8003852 <HAL_RCC_OscConfig+0x21a>
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	2b0c      	cmp	r3, #12
 800384a:	d10e      	bne.n	800386a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	2b03      	cmp	r3, #3
 8003850:	d10b      	bne.n	800386a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003852:	4b15      	ldr	r3, [pc, #84]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d064      	beq.n	8003928 <HAL_RCC_OscConfig+0x2f0>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d160      	bne.n	8003928 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e2ba      	b.n	8003de0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003872:	d106      	bne.n	8003882 <HAL_RCC_OscConfig+0x24a>
 8003874:	4b0c      	ldr	r3, [pc, #48]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a0b      	ldr	r2, [pc, #44]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 800387a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800387e:	6013      	str	r3, [r2, #0]
 8003880:	e026      	b.n	80038d0 <HAL_RCC_OscConfig+0x298>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800388a:	d115      	bne.n	80038b8 <HAL_RCC_OscConfig+0x280>
 800388c:	4b06      	ldr	r3, [pc, #24]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a05      	ldr	r2, [pc, #20]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 8003892:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	4b03      	ldr	r3, [pc, #12]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a02      	ldr	r2, [pc, #8]	@ (80038a8 <HAL_RCC_OscConfig+0x270>)
 800389e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	e014      	b.n	80038d0 <HAL_RCC_OscConfig+0x298>
 80038a6:	bf00      	nop
 80038a8:	40021000 	.word	0x40021000
 80038ac:	08005724 	.word	0x08005724
 80038b0:	20000000 	.word	0x20000000
 80038b4:	20000004 	.word	0x20000004
 80038b8:	4ba0      	ldr	r3, [pc, #640]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a9f      	ldr	r2, [pc, #636]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 80038be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	4b9d      	ldr	r3, [pc, #628]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a9c      	ldr	r2, [pc, #624]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 80038ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d013      	beq.n	8003900 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7fd fc1c 	bl	8001114 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038e0:	f7fd fc18 	bl	8001114 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b64      	cmp	r3, #100	@ 0x64
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e276      	b.n	8003de0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038f2:	4b92      	ldr	r3, [pc, #584]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0x2a8>
 80038fe:	e014      	b.n	800392a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003900:	f7fd fc08 	bl	8001114 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003908:	f7fd fc04 	bl	8001114 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b64      	cmp	r3, #100	@ 0x64
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e262      	b.n	8003de0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800391a:	4b88      	ldr	r3, [pc, #544]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f0      	bne.n	8003908 <HAL_RCC_OscConfig+0x2d0>
 8003926:	e000      	b.n	800392a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d060      	beq.n	80039f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	2b04      	cmp	r3, #4
 800393a:	d005      	beq.n	8003948 <HAL_RCC_OscConfig+0x310>
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	2b0c      	cmp	r3, #12
 8003940:	d119      	bne.n	8003976 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2b02      	cmp	r3, #2
 8003946:	d116      	bne.n	8003976 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003948:	4b7c      	ldr	r3, [pc, #496]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <HAL_RCC_OscConfig+0x328>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e23f      	b.n	8003de0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003960:	4b76      	ldr	r3, [pc, #472]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	061b      	lsls	r3, r3, #24
 800396e:	4973      	ldr	r1, [pc, #460]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 8003970:	4313      	orrs	r3, r2
 8003972:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003974:	e040      	b.n	80039f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d023      	beq.n	80039c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800397e:	4b6f      	ldr	r3, [pc, #444]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a6e      	ldr	r2, [pc, #440]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 8003984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398a:	f7fd fbc3 	bl	8001114 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003992:	f7fd fbbf 	bl	8001114 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e21d      	b.n	8003de0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039a4:	4b65      	ldr	r3, [pc, #404]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b0:	4b62      	ldr	r3, [pc, #392]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	061b      	lsls	r3, r3, #24
 80039be:	495f      	ldr	r1, [pc, #380]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	604b      	str	r3, [r1, #4]
 80039c4:	e018      	b.n	80039f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039c6:	4b5d      	ldr	r3, [pc, #372]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a5c      	ldr	r2, [pc, #368]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 80039cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d2:	f7fd fb9f 	bl	8001114 <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039d8:	e008      	b.n	80039ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039da:	f7fd fb9b 	bl	8001114 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e1f9      	b.n	8003de0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039ec:	4b53      	ldr	r3, [pc, #332]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1f0      	bne.n	80039da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d03c      	beq.n	8003a7e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d01c      	beq.n	8003a46 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a0c:	4b4b      	ldr	r3, [pc, #300]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 8003a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a12:	4a4a      	ldr	r2, [pc, #296]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 8003a14:	f043 0301 	orr.w	r3, r3, #1
 8003a18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a1c:	f7fd fb7a 	bl	8001114 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a24:	f7fd fb76 	bl	8001114 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e1d4      	b.n	8003de0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a36:	4b41      	ldr	r3, [pc, #260]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 8003a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0ef      	beq.n	8003a24 <HAL_RCC_OscConfig+0x3ec>
 8003a44:	e01b      	b.n	8003a7e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a46:	4b3d      	ldr	r3, [pc, #244]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 8003a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a4c:	4a3b      	ldr	r2, [pc, #236]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 8003a4e:	f023 0301 	bic.w	r3, r3, #1
 8003a52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a56:	f7fd fb5d 	bl	8001114 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a5e:	f7fd fb59 	bl	8001114 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e1b7      	b.n	8003de0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a70:	4b32      	ldr	r3, [pc, #200]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 8003a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1ef      	bne.n	8003a5e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0304 	and.w	r3, r3, #4
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 80a6 	beq.w	8003bd8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a90:	4b2a      	ldr	r3, [pc, #168]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 8003a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10d      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a9c:	4b27      	ldr	r3, [pc, #156]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 8003a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa0:	4a26      	ldr	r2, [pc, #152]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 8003aa2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aa6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003aa8:	4b24      	ldr	r3, [pc, #144]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 8003aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ab8:	4b21      	ldr	r3, [pc, #132]	@ (8003b40 <HAL_RCC_OscConfig+0x508>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d118      	bne.n	8003af6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ac4:	4b1e      	ldr	r3, [pc, #120]	@ (8003b40 <HAL_RCC_OscConfig+0x508>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8003b40 <HAL_RCC_OscConfig+0x508>)
 8003aca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ace:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ad0:	f7fd fb20 	bl	8001114 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad8:	f7fd fb1c 	bl	8001114 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e17a      	b.n	8003de0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aea:	4b15      	ldr	r3, [pc, #84]	@ (8003b40 <HAL_RCC_OscConfig+0x508>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0f0      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d108      	bne.n	8003b10 <HAL_RCC_OscConfig+0x4d8>
 8003afe:	4b0f      	ldr	r3, [pc, #60]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 8003b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b04:	4a0d      	ldr	r2, [pc, #52]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 8003b06:	f043 0301 	orr.w	r3, r3, #1
 8003b0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b0e:	e029      	b.n	8003b64 <HAL_RCC_OscConfig+0x52c>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	2b05      	cmp	r3, #5
 8003b16:	d115      	bne.n	8003b44 <HAL_RCC_OscConfig+0x50c>
 8003b18:	4b08      	ldr	r3, [pc, #32]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 8003b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b1e:	4a07      	ldr	r2, [pc, #28]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 8003b20:	f043 0304 	orr.w	r3, r3, #4
 8003b24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b28:	4b04      	ldr	r3, [pc, #16]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 8003b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b2e:	4a03      	ldr	r2, [pc, #12]	@ (8003b3c <HAL_RCC_OscConfig+0x504>)
 8003b30:	f043 0301 	orr.w	r3, r3, #1
 8003b34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b38:	e014      	b.n	8003b64 <HAL_RCC_OscConfig+0x52c>
 8003b3a:	bf00      	nop
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	40007000 	.word	0x40007000
 8003b44:	4b9c      	ldr	r3, [pc, #624]	@ (8003db8 <HAL_RCC_OscConfig+0x780>)
 8003b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4a:	4a9b      	ldr	r2, [pc, #620]	@ (8003db8 <HAL_RCC_OscConfig+0x780>)
 8003b4c:	f023 0301 	bic.w	r3, r3, #1
 8003b50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b54:	4b98      	ldr	r3, [pc, #608]	@ (8003db8 <HAL_RCC_OscConfig+0x780>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b5a:	4a97      	ldr	r2, [pc, #604]	@ (8003db8 <HAL_RCC_OscConfig+0x780>)
 8003b5c:	f023 0304 	bic.w	r3, r3, #4
 8003b60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d016      	beq.n	8003b9a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6c:	f7fd fad2 	bl	8001114 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b72:	e00a      	b.n	8003b8a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b74:	f7fd face 	bl	8001114 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e12a      	b.n	8003de0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b8a:	4b8b      	ldr	r3, [pc, #556]	@ (8003db8 <HAL_RCC_OscConfig+0x780>)
 8003b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0ed      	beq.n	8003b74 <HAL_RCC_OscConfig+0x53c>
 8003b98:	e015      	b.n	8003bc6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9a:	f7fd fabb 	bl	8001114 <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ba0:	e00a      	b.n	8003bb8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba2:	f7fd fab7 	bl	8001114 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e113      	b.n	8003de0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bb8:	4b7f      	ldr	r3, [pc, #508]	@ (8003db8 <HAL_RCC_OscConfig+0x780>)
 8003bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1ed      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bc6:	7ffb      	ldrb	r3, [r7, #31]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d105      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bcc:	4b7a      	ldr	r3, [pc, #488]	@ (8003db8 <HAL_RCC_OscConfig+0x780>)
 8003bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd0:	4a79      	ldr	r2, [pc, #484]	@ (8003db8 <HAL_RCC_OscConfig+0x780>)
 8003bd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bd6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 80fe 	beq.w	8003dde <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	f040 80d0 	bne.w	8003d8c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003bec:	4b72      	ldr	r3, [pc, #456]	@ (8003db8 <HAL_RCC_OscConfig+0x780>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f003 0203 	and.w	r2, r3, #3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d130      	bne.n	8003c62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d127      	bne.n	8003c62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d11f      	bne.n	8003c62 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c2c:	2a07      	cmp	r2, #7
 8003c2e:	bf14      	ite	ne
 8003c30:	2201      	movne	r2, #1
 8003c32:	2200      	moveq	r2, #0
 8003c34:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d113      	bne.n	8003c62 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c44:	085b      	lsrs	r3, r3, #1
 8003c46:	3b01      	subs	r3, #1
 8003c48:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d109      	bne.n	8003c62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c58:	085b      	lsrs	r3, r3, #1
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d06e      	beq.n	8003d40 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	2b0c      	cmp	r3, #12
 8003c66:	d069      	beq.n	8003d3c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c68:	4b53      	ldr	r3, [pc, #332]	@ (8003db8 <HAL_RCC_OscConfig+0x780>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d105      	bne.n	8003c80 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c74:	4b50      	ldr	r3, [pc, #320]	@ (8003db8 <HAL_RCC_OscConfig+0x780>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e0ad      	b.n	8003de0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c84:	4b4c      	ldr	r3, [pc, #304]	@ (8003db8 <HAL_RCC_OscConfig+0x780>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a4b      	ldr	r2, [pc, #300]	@ (8003db8 <HAL_RCC_OscConfig+0x780>)
 8003c8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c8e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c90:	f7fd fa40 	bl	8001114 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c98:	f7fd fa3c 	bl	8001114 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e09a      	b.n	8003de0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003caa:	4b43      	ldr	r3, [pc, #268]	@ (8003db8 <HAL_RCC_OscConfig+0x780>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f0      	bne.n	8003c98 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cb6:	4b40      	ldr	r3, [pc, #256]	@ (8003db8 <HAL_RCC_OscConfig+0x780>)
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	4b40      	ldr	r3, [pc, #256]	@ (8003dbc <HAL_RCC_OscConfig+0x784>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003cc6:	3a01      	subs	r2, #1
 8003cc8:	0112      	lsls	r2, r2, #4
 8003cca:	4311      	orrs	r1, r2
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003cd0:	0212      	lsls	r2, r2, #8
 8003cd2:	4311      	orrs	r1, r2
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003cd8:	0852      	lsrs	r2, r2, #1
 8003cda:	3a01      	subs	r2, #1
 8003cdc:	0552      	lsls	r2, r2, #21
 8003cde:	4311      	orrs	r1, r2
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003ce4:	0852      	lsrs	r2, r2, #1
 8003ce6:	3a01      	subs	r2, #1
 8003ce8:	0652      	lsls	r2, r2, #25
 8003cea:	4311      	orrs	r1, r2
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003cf0:	0912      	lsrs	r2, r2, #4
 8003cf2:	0452      	lsls	r2, r2, #17
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	4930      	ldr	r1, [pc, #192]	@ (8003db8 <HAL_RCC_OscConfig+0x780>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003cfc:	4b2e      	ldr	r3, [pc, #184]	@ (8003db8 <HAL_RCC_OscConfig+0x780>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a2d      	ldr	r2, [pc, #180]	@ (8003db8 <HAL_RCC_OscConfig+0x780>)
 8003d02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d08:	4b2b      	ldr	r3, [pc, #172]	@ (8003db8 <HAL_RCC_OscConfig+0x780>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	4a2a      	ldr	r2, [pc, #168]	@ (8003db8 <HAL_RCC_OscConfig+0x780>)
 8003d0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d14:	f7fd f9fe 	bl	8001114 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d1c:	f7fd f9fa 	bl	8001114 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e058      	b.n	8003de0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d2e:	4b22      	ldr	r3, [pc, #136]	@ (8003db8 <HAL_RCC_OscConfig+0x780>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d3a:	e050      	b.n	8003dde <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e04f      	b.n	8003de0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d40:	4b1d      	ldr	r3, [pc, #116]	@ (8003db8 <HAL_RCC_OscConfig+0x780>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d148      	bne.n	8003dde <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8003db8 <HAL_RCC_OscConfig+0x780>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a19      	ldr	r2, [pc, #100]	@ (8003db8 <HAL_RCC_OscConfig+0x780>)
 8003d52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d58:	4b17      	ldr	r3, [pc, #92]	@ (8003db8 <HAL_RCC_OscConfig+0x780>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	4a16      	ldr	r2, [pc, #88]	@ (8003db8 <HAL_RCC_OscConfig+0x780>)
 8003d5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d64:	f7fd f9d6 	bl	8001114 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d6c:	f7fd f9d2 	bl	8001114 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e030      	b.n	8003de0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8003db8 <HAL_RCC_OscConfig+0x780>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0f0      	beq.n	8003d6c <HAL_RCC_OscConfig+0x734>
 8003d8a:	e028      	b.n	8003dde <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	2b0c      	cmp	r3, #12
 8003d90:	d023      	beq.n	8003dda <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d92:	4b09      	ldr	r3, [pc, #36]	@ (8003db8 <HAL_RCC_OscConfig+0x780>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a08      	ldr	r2, [pc, #32]	@ (8003db8 <HAL_RCC_OscConfig+0x780>)
 8003d98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9e:	f7fd f9b9 	bl	8001114 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003da4:	e00c      	b.n	8003dc0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003da6:	f7fd f9b5 	bl	8001114 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d905      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e013      	b.n	8003de0 <HAL_RCC_OscConfig+0x7a8>
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dc0:	4b09      	ldr	r3, [pc, #36]	@ (8003de8 <HAL_RCC_OscConfig+0x7b0>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1ec      	bne.n	8003da6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003dcc:	4b06      	ldr	r3, [pc, #24]	@ (8003de8 <HAL_RCC_OscConfig+0x7b0>)
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	4905      	ldr	r1, [pc, #20]	@ (8003de8 <HAL_RCC_OscConfig+0x7b0>)
 8003dd2:	4b06      	ldr	r3, [pc, #24]	@ (8003dec <HAL_RCC_OscConfig+0x7b4>)
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	60cb      	str	r3, [r1, #12]
 8003dd8:	e001      	b.n	8003dde <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3720      	adds	r7, #32
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40021000 	.word	0x40021000
 8003dec:	feeefffc 	.word	0xfeeefffc

08003df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e0e7      	b.n	8003fd4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e04:	4b75      	ldr	r3, [pc, #468]	@ (8003fdc <HAL_RCC_ClockConfig+0x1ec>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d910      	bls.n	8003e34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e12:	4b72      	ldr	r3, [pc, #456]	@ (8003fdc <HAL_RCC_ClockConfig+0x1ec>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f023 0207 	bic.w	r2, r3, #7
 8003e1a:	4970      	ldr	r1, [pc, #448]	@ (8003fdc <HAL_RCC_ClockConfig+0x1ec>)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e22:	4b6e      	ldr	r3, [pc, #440]	@ (8003fdc <HAL_RCC_ClockConfig+0x1ec>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d001      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e0cf      	b.n	8003fd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d010      	beq.n	8003e62 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	4b66      	ldr	r3, [pc, #408]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d908      	bls.n	8003e62 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e50:	4b63      	ldr	r3, [pc, #396]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	4960      	ldr	r1, [pc, #384]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d04c      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b03      	cmp	r3, #3
 8003e74:	d107      	bne.n	8003e86 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e76:	4b5a      	ldr	r3, [pc, #360]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d121      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e0a6      	b.n	8003fd4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d107      	bne.n	8003e9e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e8e:	4b54      	ldr	r3, [pc, #336]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d115      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e09a      	b.n	8003fd4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d107      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ea6:	4b4e      	ldr	r3, [pc, #312]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d109      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e08e      	b.n	8003fd4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eb6:	4b4a      	ldr	r3, [pc, #296]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e086      	b.n	8003fd4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ec6:	4b46      	ldr	r3, [pc, #280]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f023 0203 	bic.w	r2, r3, #3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	4943      	ldr	r1, [pc, #268]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed8:	f7fd f91c 	bl	8001114 <HAL_GetTick>
 8003edc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ede:	e00a      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ee0:	f7fd f918 	bl	8001114 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e06e      	b.n	8003fd4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef6:	4b3a      	ldr	r3, [pc, #232]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 020c 	and.w	r2, r3, #12
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d1eb      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d010      	beq.n	8003f36 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	4b31      	ldr	r3, [pc, #196]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d208      	bcs.n	8003f36 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f24:	4b2e      	ldr	r3, [pc, #184]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	492b      	ldr	r1, [pc, #172]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f36:	4b29      	ldr	r3, [pc, #164]	@ (8003fdc <HAL_RCC_ClockConfig+0x1ec>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d210      	bcs.n	8003f66 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f44:	4b25      	ldr	r3, [pc, #148]	@ (8003fdc <HAL_RCC_ClockConfig+0x1ec>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f023 0207 	bic.w	r2, r3, #7
 8003f4c:	4923      	ldr	r1, [pc, #140]	@ (8003fdc <HAL_RCC_ClockConfig+0x1ec>)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f54:	4b21      	ldr	r3, [pc, #132]	@ (8003fdc <HAL_RCC_ClockConfig+0x1ec>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d001      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e036      	b.n	8003fd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0304 	and.w	r3, r3, #4
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d008      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f72:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	4918      	ldr	r1, [pc, #96]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d009      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f90:	4b13      	ldr	r3, [pc, #76]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	4910      	ldr	r1, [pc, #64]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fa4:	f000 f824 	bl	8003ff0 <HAL_RCC_GetSysClockFreq>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	091b      	lsrs	r3, r3, #4
 8003fb0:	f003 030f 	and.w	r3, r3, #15
 8003fb4:	490b      	ldr	r1, [pc, #44]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f4>)
 8003fb6:	5ccb      	ldrb	r3, [r1, r3]
 8003fb8:	f003 031f 	and.w	r3, r3, #31
 8003fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc0:	4a09      	ldr	r2, [pc, #36]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1f8>)
 8003fc2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003fc4:	4b09      	ldr	r3, [pc, #36]	@ (8003fec <HAL_RCC_ClockConfig+0x1fc>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fd f853 	bl	8001074 <HAL_InitTick>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	72fb      	strb	r3, [r7, #11]

  return status;
 8003fd2:	7afb      	ldrb	r3, [r7, #11]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40022000 	.word	0x40022000
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	08005724 	.word	0x08005724
 8003fe8:	20000000 	.word	0x20000000
 8003fec:	20000004 	.word	0x20000004

08003ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b089      	sub	sp, #36	@ 0x24
 8003ff4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61fb      	str	r3, [r7, #28]
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ffe:	4b3e      	ldr	r3, [pc, #248]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 030c 	and.w	r3, r3, #12
 8004006:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004008:	4b3b      	ldr	r3, [pc, #236]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f003 0303 	and.w	r3, r3, #3
 8004010:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <HAL_RCC_GetSysClockFreq+0x34>
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	2b0c      	cmp	r3, #12
 800401c:	d121      	bne.n	8004062 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d11e      	bne.n	8004062 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004024:	4b34      	ldr	r3, [pc, #208]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0308 	and.w	r3, r3, #8
 800402c:	2b00      	cmp	r3, #0
 800402e:	d107      	bne.n	8004040 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004030:	4b31      	ldr	r3, [pc, #196]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004032:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004036:	0a1b      	lsrs	r3, r3, #8
 8004038:	f003 030f 	and.w	r3, r3, #15
 800403c:	61fb      	str	r3, [r7, #28]
 800403e:	e005      	b.n	800404c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004040:	4b2d      	ldr	r3, [pc, #180]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	091b      	lsrs	r3, r3, #4
 8004046:	f003 030f 	and.w	r3, r3, #15
 800404a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800404c:	4a2b      	ldr	r2, [pc, #172]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004054:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10d      	bne.n	8004078 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004060:	e00a      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	2b04      	cmp	r3, #4
 8004066:	d102      	bne.n	800406e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004068:	4b25      	ldr	r3, [pc, #148]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x110>)
 800406a:	61bb      	str	r3, [r7, #24]
 800406c:	e004      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	2b08      	cmp	r3, #8
 8004072:	d101      	bne.n	8004078 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004074:	4b23      	ldr	r3, [pc, #140]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x114>)
 8004076:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	2b0c      	cmp	r3, #12
 800407c:	d134      	bne.n	80040e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800407e:	4b1e      	ldr	r3, [pc, #120]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d003      	beq.n	8004096 <HAL_RCC_GetSysClockFreq+0xa6>
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2b03      	cmp	r3, #3
 8004092:	d003      	beq.n	800409c <HAL_RCC_GetSysClockFreq+0xac>
 8004094:	e005      	b.n	80040a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004096:	4b1a      	ldr	r3, [pc, #104]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x110>)
 8004098:	617b      	str	r3, [r7, #20]
      break;
 800409a:	e005      	b.n	80040a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800409c:	4b19      	ldr	r3, [pc, #100]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x114>)
 800409e:	617b      	str	r3, [r7, #20]
      break;
 80040a0:	e002      	b.n	80040a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	617b      	str	r3, [r7, #20]
      break;
 80040a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040a8:	4b13      	ldr	r3, [pc, #76]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	091b      	lsrs	r3, r3, #4
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	3301      	adds	r3, #1
 80040b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040b6:	4b10      	ldr	r3, [pc, #64]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	0a1b      	lsrs	r3, r3, #8
 80040bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	fb03 f202 	mul.w	r2, r3, r2
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040ce:	4b0a      	ldr	r3, [pc, #40]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	0e5b      	lsrs	r3, r3, #25
 80040d4:	f003 0303 	and.w	r3, r3, #3
 80040d8:	3301      	adds	r3, #1
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80040e8:	69bb      	ldr	r3, [r7, #24]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3724      	adds	r7, #36	@ 0x24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	40021000 	.word	0x40021000
 80040fc:	0800573c 	.word	0x0800573c
 8004100:	00f42400 	.word	0x00f42400
 8004104:	007a1200 	.word	0x007a1200

08004108 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800410c:	4b03      	ldr	r3, [pc, #12]	@ (800411c <HAL_RCC_GetHCLKFreq+0x14>)
 800410e:	681b      	ldr	r3, [r3, #0]
}
 8004110:	4618      	mov	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	20000000 	.word	0x20000000

08004120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004124:	f7ff fff0 	bl	8004108 <HAL_RCC_GetHCLKFreq>
 8004128:	4602      	mov	r2, r0
 800412a:	4b06      	ldr	r3, [pc, #24]	@ (8004144 <HAL_RCC_GetPCLK1Freq+0x24>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	0a1b      	lsrs	r3, r3, #8
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	4904      	ldr	r1, [pc, #16]	@ (8004148 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004136:	5ccb      	ldrb	r3, [r1, r3]
 8004138:	f003 031f 	and.w	r3, r3, #31
 800413c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004140:	4618      	mov	r0, r3
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40021000 	.word	0x40021000
 8004148:	08005734 	.word	0x08005734

0800414c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004150:	f7ff ffda 	bl	8004108 <HAL_RCC_GetHCLKFreq>
 8004154:	4602      	mov	r2, r0
 8004156:	4b06      	ldr	r3, [pc, #24]	@ (8004170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	0adb      	lsrs	r3, r3, #11
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	4904      	ldr	r1, [pc, #16]	@ (8004174 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004162:	5ccb      	ldrb	r3, [r1, r3]
 8004164:	f003 031f 	and.w	r3, r3, #31
 8004168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800416c:	4618      	mov	r0, r3
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40021000 	.word	0x40021000
 8004174:	08005734 	.word	0x08005734

08004178 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004180:	2300      	movs	r3, #0
 8004182:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004184:	4b2a      	ldr	r3, [pc, #168]	@ (8004230 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004188:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004190:	f7ff f9ee 	bl	8003570 <HAL_PWREx_GetVoltageRange>
 8004194:	6178      	str	r0, [r7, #20]
 8004196:	e014      	b.n	80041c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004198:	4b25      	ldr	r3, [pc, #148]	@ (8004230 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800419a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800419c:	4a24      	ldr	r2, [pc, #144]	@ (8004230 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800419e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80041a4:	4b22      	ldr	r3, [pc, #136]	@ (8004230 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041b0:	f7ff f9de 	bl	8003570 <HAL_PWREx_GetVoltageRange>
 80041b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004230 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ba:	4a1d      	ldr	r2, [pc, #116]	@ (8004230 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041c0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041c8:	d10b      	bne.n	80041e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b80      	cmp	r3, #128	@ 0x80
 80041ce:	d919      	bls.n	8004204 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2ba0      	cmp	r3, #160	@ 0xa0
 80041d4:	d902      	bls.n	80041dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041d6:	2302      	movs	r3, #2
 80041d8:	613b      	str	r3, [r7, #16]
 80041da:	e013      	b.n	8004204 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041dc:	2301      	movs	r3, #1
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	e010      	b.n	8004204 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b80      	cmp	r3, #128	@ 0x80
 80041e6:	d902      	bls.n	80041ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80041e8:	2303      	movs	r3, #3
 80041ea:	613b      	str	r3, [r7, #16]
 80041ec:	e00a      	b.n	8004204 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b80      	cmp	r3, #128	@ 0x80
 80041f2:	d102      	bne.n	80041fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041f4:	2302      	movs	r3, #2
 80041f6:	613b      	str	r3, [r7, #16]
 80041f8:	e004      	b.n	8004204 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b70      	cmp	r3, #112	@ 0x70
 80041fe:	d101      	bne.n	8004204 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004200:	2301      	movs	r3, #1
 8004202:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004204:	4b0b      	ldr	r3, [pc, #44]	@ (8004234 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f023 0207 	bic.w	r2, r3, #7
 800420c:	4909      	ldr	r1, [pc, #36]	@ (8004234 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004214:	4b07      	ldr	r3, [pc, #28]	@ (8004234 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	429a      	cmp	r2, r3
 8004220:	d001      	beq.n	8004226 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40021000 	.word	0x40021000
 8004234:	40022000 	.word	0x40022000

08004238 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004240:	2300      	movs	r3, #0
 8004242:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004244:	2300      	movs	r3, #0
 8004246:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004250:	2b00      	cmp	r3, #0
 8004252:	d041      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004258:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800425c:	d02a      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800425e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004262:	d824      	bhi.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004264:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004268:	d008      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800426a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800426e:	d81e      	bhi.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00a      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004274:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004278:	d010      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800427a:	e018      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800427c:	4b86      	ldr	r3, [pc, #536]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4a85      	ldr	r2, [pc, #532]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004282:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004286:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004288:	e015      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	3304      	adds	r3, #4
 800428e:	2100      	movs	r1, #0
 8004290:	4618      	mov	r0, r3
 8004292:	f000 facb 	bl	800482c <RCCEx_PLLSAI1_Config>
 8004296:	4603      	mov	r3, r0
 8004298:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800429a:	e00c      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3320      	adds	r3, #32
 80042a0:	2100      	movs	r1, #0
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fbb6 	bl	8004a14 <RCCEx_PLLSAI2_Config>
 80042a8:	4603      	mov	r3, r0
 80042aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042ac:	e003      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	74fb      	strb	r3, [r7, #19]
      break;
 80042b2:	e000      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80042b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042b6:	7cfb      	ldrb	r3, [r7, #19]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10b      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042bc:	4b76      	ldr	r3, [pc, #472]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042c2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042ca:	4973      	ldr	r1, [pc, #460]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80042d2:	e001      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d4:	7cfb      	ldrb	r3, [r7, #19]
 80042d6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d041      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80042ec:	d02a      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80042ee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80042f2:	d824      	bhi.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042f8:	d008      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042fe:	d81e      	bhi.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00a      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004304:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004308:	d010      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800430a:	e018      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800430c:	4b62      	ldr	r3, [pc, #392]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	4a61      	ldr	r2, [pc, #388]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004312:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004316:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004318:	e015      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	3304      	adds	r3, #4
 800431e:	2100      	movs	r1, #0
 8004320:	4618      	mov	r0, r3
 8004322:	f000 fa83 	bl	800482c <RCCEx_PLLSAI1_Config>
 8004326:	4603      	mov	r3, r0
 8004328:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800432a:	e00c      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3320      	adds	r3, #32
 8004330:	2100      	movs	r1, #0
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fb6e 	bl	8004a14 <RCCEx_PLLSAI2_Config>
 8004338:	4603      	mov	r3, r0
 800433a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800433c:	e003      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	74fb      	strb	r3, [r7, #19]
      break;
 8004342:	e000      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004344:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004346:	7cfb      	ldrb	r3, [r7, #19]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10b      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800434c:	4b52      	ldr	r3, [pc, #328]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800434e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004352:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800435a:	494f      	ldr	r1, [pc, #316]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800435c:	4313      	orrs	r3, r2
 800435e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004362:	e001      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004364:	7cfb      	ldrb	r3, [r7, #19]
 8004366:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 80a0 	beq.w	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004376:	2300      	movs	r3, #0
 8004378:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800437a:	4b47      	ldr	r3, [pc, #284]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800437c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800437e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800438a:	2300      	movs	r3, #0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00d      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004390:	4b41      	ldr	r3, [pc, #260]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004394:	4a40      	ldr	r2, [pc, #256]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004396:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800439a:	6593      	str	r3, [r2, #88]	@ 0x58
 800439c:	4b3e      	ldr	r3, [pc, #248]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800439e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043a4:	60bb      	str	r3, [r7, #8]
 80043a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043a8:	2301      	movs	r3, #1
 80043aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043ac:	4b3b      	ldr	r3, [pc, #236]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a3a      	ldr	r2, [pc, #232]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043b8:	f7fc feac 	bl	8001114 <HAL_GetTick>
 80043bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043be:	e009      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043c0:	f7fc fea8 	bl	8001114 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d902      	bls.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	74fb      	strb	r3, [r7, #19]
        break;
 80043d2:	e005      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043d4:	4b31      	ldr	r3, [pc, #196]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0ef      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80043e0:	7cfb      	ldrb	r3, [r7, #19]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d15c      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043e6:	4b2c      	ldr	r3, [pc, #176]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d01f      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	429a      	cmp	r2, r3
 8004402:	d019      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004404:	4b24      	ldr	r3, [pc, #144]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800440a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800440e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004410:	4b21      	ldr	r3, [pc, #132]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004416:	4a20      	ldr	r2, [pc, #128]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800441c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004420:	4b1d      	ldr	r3, [pc, #116]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004426:	4a1c      	ldr	r2, [pc, #112]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004428:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800442c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004430:	4a19      	ldr	r2, [pc, #100]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d016      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004442:	f7fc fe67 	bl	8001114 <HAL_GetTick>
 8004446:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004448:	e00b      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800444a:	f7fc fe63 	bl	8001114 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004458:	4293      	cmp	r3, r2
 800445a:	d902      	bls.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	74fb      	strb	r3, [r7, #19]
            break;
 8004460:	e006      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004462:	4b0d      	ldr	r3, [pc, #52]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0ec      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004470:	7cfb      	ldrb	r3, [r7, #19]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10c      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004476:	4b08      	ldr	r3, [pc, #32]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800447c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004486:	4904      	ldr	r1, [pc, #16]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004488:	4313      	orrs	r3, r2
 800448a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800448e:	e009      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004490:	7cfb      	ldrb	r3, [r7, #19]
 8004492:	74bb      	strb	r3, [r7, #18]
 8004494:	e006      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004496:	bf00      	nop
 8004498:	40021000 	.word	0x40021000
 800449c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a0:	7cfb      	ldrb	r3, [r7, #19]
 80044a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044a4:	7c7b      	ldrb	r3, [r7, #17]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d105      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044aa:	4b9e      	ldr	r3, [pc, #632]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ae:	4a9d      	ldr	r2, [pc, #628]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044b4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044c2:	4b98      	ldr	r3, [pc, #608]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c8:	f023 0203 	bic.w	r2, r3, #3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d0:	4994      	ldr	r1, [pc, #592]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00a      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044e4:	4b8f      	ldr	r3, [pc, #572]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ea:	f023 020c 	bic.w	r2, r3, #12
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f2:	498c      	ldr	r1, [pc, #560]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004506:	4b87      	ldr	r3, [pc, #540]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800450c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004514:	4983      	ldr	r1, [pc, #524]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004516:	4313      	orrs	r3, r2
 8004518:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0308 	and.w	r3, r3, #8
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00a      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004528:	4b7e      	ldr	r3, [pc, #504]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800452a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800452e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004536:	497b      	ldr	r1, [pc, #492]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004538:	4313      	orrs	r3, r2
 800453a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0310 	and.w	r3, r3, #16
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800454a:	4b76      	ldr	r3, [pc, #472]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800454c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004550:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004558:	4972      	ldr	r1, [pc, #456]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0320 	and.w	r3, r3, #32
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00a      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800456c:	4b6d      	ldr	r3, [pc, #436]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800456e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004572:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800457a:	496a      	ldr	r1, [pc, #424]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800457c:	4313      	orrs	r3, r2
 800457e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800458e:	4b65      	ldr	r3, [pc, #404]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004594:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800459c:	4961      	ldr	r1, [pc, #388]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00a      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045b0:	4b5c      	ldr	r3, [pc, #368]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045be:	4959      	ldr	r1, [pc, #356]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045d2:	4b54      	ldr	r3, [pc, #336]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045e0:	4950      	ldr	r1, [pc, #320]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045f4:	4b4b      	ldr	r3, [pc, #300]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045fa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004602:	4948      	ldr	r1, [pc, #288]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004616:	4b43      	ldr	r3, [pc, #268]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800461c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004624:	493f      	ldr	r1, [pc, #252]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004626:	4313      	orrs	r3, r2
 8004628:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d028      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004638:	4b3a      	ldr	r3, [pc, #232]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800463a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800463e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004646:	4937      	ldr	r1, [pc, #220]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004648:	4313      	orrs	r3, r2
 800464a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004652:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004656:	d106      	bne.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004658:	4b32      	ldr	r3, [pc, #200]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	4a31      	ldr	r2, [pc, #196]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800465e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004662:	60d3      	str	r3, [r2, #12]
 8004664:	e011      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800466a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800466e:	d10c      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3304      	adds	r3, #4
 8004674:	2101      	movs	r1, #1
 8004676:	4618      	mov	r0, r3
 8004678:	f000 f8d8 	bl	800482c <RCCEx_PLLSAI1_Config>
 800467c:	4603      	mov	r3, r0
 800467e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004680:	7cfb      	ldrb	r3, [r7, #19]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004686:	7cfb      	ldrb	r3, [r7, #19]
 8004688:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d028      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004696:	4b23      	ldr	r3, [pc, #140]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800469c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a4:	491f      	ldr	r1, [pc, #124]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046b4:	d106      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046c0:	60d3      	str	r3, [r2, #12]
 80046c2:	e011      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046cc:	d10c      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	3304      	adds	r3, #4
 80046d2:	2101      	movs	r1, #1
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 f8a9 	bl	800482c <RCCEx_PLLSAI1_Config>
 80046da:	4603      	mov	r3, r0
 80046dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046de:	7cfb      	ldrb	r3, [r7, #19]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80046e4:	7cfb      	ldrb	r3, [r7, #19]
 80046e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d02b      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004702:	4908      	ldr	r1, [pc, #32]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004704:	4313      	orrs	r3, r2
 8004706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800470e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004712:	d109      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004714:	4b03      	ldr	r3, [pc, #12]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	4a02      	ldr	r2, [pc, #8]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800471a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800471e:	60d3      	str	r3, [r2, #12]
 8004720:	e014      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004722:	bf00      	nop
 8004724:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800472c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004730:	d10c      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	3304      	adds	r3, #4
 8004736:	2101      	movs	r1, #1
 8004738:	4618      	mov	r0, r3
 800473a:	f000 f877 	bl	800482c <RCCEx_PLLSAI1_Config>
 800473e:	4603      	mov	r3, r0
 8004740:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004742:	7cfb      	ldrb	r3, [r7, #19]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004748:	7cfb      	ldrb	r3, [r7, #19]
 800474a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d02f      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004758:	4b2b      	ldr	r3, [pc, #172]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800475a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800475e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004766:	4928      	ldr	r1, [pc, #160]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004768:	4313      	orrs	r3, r2
 800476a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004772:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004776:	d10d      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3304      	adds	r3, #4
 800477c:	2102      	movs	r1, #2
 800477e:	4618      	mov	r0, r3
 8004780:	f000 f854 	bl	800482c <RCCEx_PLLSAI1_Config>
 8004784:	4603      	mov	r3, r0
 8004786:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004788:	7cfb      	ldrb	r3, [r7, #19]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d014      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800478e:	7cfb      	ldrb	r3, [r7, #19]
 8004790:	74bb      	strb	r3, [r7, #18]
 8004792:	e011      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004798:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800479c:	d10c      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	3320      	adds	r3, #32
 80047a2:	2102      	movs	r1, #2
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 f935 	bl	8004a14 <RCCEx_PLLSAI2_Config>
 80047aa:	4603      	mov	r3, r0
 80047ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047ae:	7cfb      	ldrb	r3, [r7, #19]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80047b4:	7cfb      	ldrb	r3, [r7, #19]
 80047b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047c4:	4b10      	ldr	r3, [pc, #64]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ca:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047d2:	490d      	ldr	r1, [pc, #52]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00b      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047e6:	4b08      	ldr	r3, [pc, #32]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047f6:	4904      	ldr	r1, [pc, #16]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3718      	adds	r7, #24
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	40021000 	.word	0x40021000

0800480c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004810:	4b05      	ldr	r3, [pc, #20]	@ (8004828 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a04      	ldr	r2, [pc, #16]	@ (8004828 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004816:	f043 0304 	orr.w	r3, r3, #4
 800481a:	6013      	str	r3, [r2, #0]
}
 800481c:	bf00      	nop
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	40021000 	.word	0x40021000

0800482c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004836:	2300      	movs	r3, #0
 8004838:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800483a:	4b75      	ldr	r3, [pc, #468]	@ (8004a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d018      	beq.n	8004878 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004846:	4b72      	ldr	r3, [pc, #456]	@ (8004a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f003 0203 	and.w	r2, r3, #3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d10d      	bne.n	8004872 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
       ||
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800485e:	4b6c      	ldr	r3, [pc, #432]	@ (8004a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	091b      	lsrs	r3, r3, #4
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
       ||
 800486e:	429a      	cmp	r2, r3
 8004870:	d047      	beq.n	8004902 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	73fb      	strb	r3, [r7, #15]
 8004876:	e044      	b.n	8004902 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b03      	cmp	r3, #3
 800487e:	d018      	beq.n	80048b2 <RCCEx_PLLSAI1_Config+0x86>
 8004880:	2b03      	cmp	r3, #3
 8004882:	d825      	bhi.n	80048d0 <RCCEx_PLLSAI1_Config+0xa4>
 8004884:	2b01      	cmp	r3, #1
 8004886:	d002      	beq.n	800488e <RCCEx_PLLSAI1_Config+0x62>
 8004888:	2b02      	cmp	r3, #2
 800488a:	d009      	beq.n	80048a0 <RCCEx_PLLSAI1_Config+0x74>
 800488c:	e020      	b.n	80048d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800488e:	4b60      	ldr	r3, [pc, #384]	@ (8004a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d11d      	bne.n	80048d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800489e:	e01a      	b.n	80048d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048a0:	4b5b      	ldr	r3, [pc, #364]	@ (8004a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d116      	bne.n	80048da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048b0:	e013      	b.n	80048da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048b2:	4b57      	ldr	r3, [pc, #348]	@ (8004a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10f      	bne.n	80048de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048be:	4b54      	ldr	r3, [pc, #336]	@ (8004a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d109      	bne.n	80048de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048ce:	e006      	b.n	80048de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	73fb      	strb	r3, [r7, #15]
      break;
 80048d4:	e004      	b.n	80048e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048d6:	bf00      	nop
 80048d8:	e002      	b.n	80048e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048da:	bf00      	nop
 80048dc:	e000      	b.n	80048e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048de:	bf00      	nop
    }

    if(status == HAL_OK)
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10d      	bne.n	8004902 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048e6:	4b4a      	ldr	r3, [pc, #296]	@ (8004a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6819      	ldr	r1, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	430b      	orrs	r3, r1
 80048fc:	4944      	ldr	r1, [pc, #272]	@ (8004a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004902:	7bfb      	ldrb	r3, [r7, #15]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d17d      	bne.n	8004a04 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004908:	4b41      	ldr	r3, [pc, #260]	@ (8004a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a40      	ldr	r2, [pc, #256]	@ (8004a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 800490e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004912:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004914:	f7fc fbfe 	bl	8001114 <HAL_GetTick>
 8004918:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800491a:	e009      	b.n	8004930 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800491c:	f7fc fbfa 	bl	8001114 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d902      	bls.n	8004930 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	73fb      	strb	r3, [r7, #15]
        break;
 800492e:	e005      	b.n	800493c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004930:	4b37      	ldr	r3, [pc, #220]	@ (8004a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1ef      	bne.n	800491c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800493c:	7bfb      	ldrb	r3, [r7, #15]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d160      	bne.n	8004a04 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d111      	bne.n	800496c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004948:	4b31      	ldr	r3, [pc, #196]	@ (8004a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004950:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6892      	ldr	r2, [r2, #8]
 8004958:	0211      	lsls	r1, r2, #8
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	68d2      	ldr	r2, [r2, #12]
 800495e:	0912      	lsrs	r2, r2, #4
 8004960:	0452      	lsls	r2, r2, #17
 8004962:	430a      	orrs	r2, r1
 8004964:	492a      	ldr	r1, [pc, #168]	@ (8004a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004966:	4313      	orrs	r3, r2
 8004968:	610b      	str	r3, [r1, #16]
 800496a:	e027      	b.n	80049bc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d112      	bne.n	8004998 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004972:	4b27      	ldr	r3, [pc, #156]	@ (8004a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800497a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6892      	ldr	r2, [r2, #8]
 8004982:	0211      	lsls	r1, r2, #8
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6912      	ldr	r2, [r2, #16]
 8004988:	0852      	lsrs	r2, r2, #1
 800498a:	3a01      	subs	r2, #1
 800498c:	0552      	lsls	r2, r2, #21
 800498e:	430a      	orrs	r2, r1
 8004990:	491f      	ldr	r1, [pc, #124]	@ (8004a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004992:	4313      	orrs	r3, r2
 8004994:	610b      	str	r3, [r1, #16]
 8004996:	e011      	b.n	80049bc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004998:	4b1d      	ldr	r3, [pc, #116]	@ (8004a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80049a0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6892      	ldr	r2, [r2, #8]
 80049a8:	0211      	lsls	r1, r2, #8
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	6952      	ldr	r2, [r2, #20]
 80049ae:	0852      	lsrs	r2, r2, #1
 80049b0:	3a01      	subs	r2, #1
 80049b2:	0652      	lsls	r2, r2, #25
 80049b4:	430a      	orrs	r2, r1
 80049b6:	4916      	ldr	r1, [pc, #88]	@ (8004a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80049bc:	4b14      	ldr	r3, [pc, #80]	@ (8004a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a13      	ldr	r2, [pc, #76]	@ (8004a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80049c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c8:	f7fc fba4 	bl	8001114 <HAL_GetTick>
 80049cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049ce:	e009      	b.n	80049e4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049d0:	f7fc fba0 	bl	8001114 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d902      	bls.n	80049e4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	73fb      	strb	r3, [r7, #15]
          break;
 80049e2:	e005      	b.n	80049f0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0ef      	beq.n	80049d0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d106      	bne.n	8004a04 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049f6:	4b06      	ldr	r3, [pc, #24]	@ (8004a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049f8:	691a      	ldr	r2, [r3, #16]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	4904      	ldr	r1, [pc, #16]	@ (8004a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	40021000 	.word	0x40021000

08004a14 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a22:	4b6a      	ldr	r3, [pc, #424]	@ (8004bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d018      	beq.n	8004a60 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a2e:	4b67      	ldr	r3, [pc, #412]	@ (8004bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f003 0203 	and.w	r2, r3, #3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d10d      	bne.n	8004a5a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
       ||
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d009      	beq.n	8004a5a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a46:	4b61      	ldr	r3, [pc, #388]	@ (8004bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	091b      	lsrs	r3, r3, #4
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
       ||
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d047      	beq.n	8004aea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	73fb      	strb	r3, [r7, #15]
 8004a5e:	e044      	b.n	8004aea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b03      	cmp	r3, #3
 8004a66:	d018      	beq.n	8004a9a <RCCEx_PLLSAI2_Config+0x86>
 8004a68:	2b03      	cmp	r3, #3
 8004a6a:	d825      	bhi.n	8004ab8 <RCCEx_PLLSAI2_Config+0xa4>
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d002      	beq.n	8004a76 <RCCEx_PLLSAI2_Config+0x62>
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d009      	beq.n	8004a88 <RCCEx_PLLSAI2_Config+0x74>
 8004a74:	e020      	b.n	8004ab8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a76:	4b55      	ldr	r3, [pc, #340]	@ (8004bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d11d      	bne.n	8004abe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a86:	e01a      	b.n	8004abe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a88:	4b50      	ldr	r3, [pc, #320]	@ (8004bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d116      	bne.n	8004ac2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a98:	e013      	b.n	8004ac2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a9a:	4b4c      	ldr	r3, [pc, #304]	@ (8004bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10f      	bne.n	8004ac6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004aa6:	4b49      	ldr	r3, [pc, #292]	@ (8004bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d109      	bne.n	8004ac6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ab6:	e006      	b.n	8004ac6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	73fb      	strb	r3, [r7, #15]
      break;
 8004abc:	e004      	b.n	8004ac8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004abe:	bf00      	nop
 8004ac0:	e002      	b.n	8004ac8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ac2:	bf00      	nop
 8004ac4:	e000      	b.n	8004ac8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ac6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10d      	bne.n	8004aea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ace:	4b3f      	ldr	r3, [pc, #252]	@ (8004bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6819      	ldr	r1, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	430b      	orrs	r3, r1
 8004ae4:	4939      	ldr	r1, [pc, #228]	@ (8004bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004aea:	7bfb      	ldrb	r3, [r7, #15]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d167      	bne.n	8004bc0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004af0:	4b36      	ldr	r3, [pc, #216]	@ (8004bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a35      	ldr	r2, [pc, #212]	@ (8004bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004afa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004afc:	f7fc fb0a 	bl	8001114 <HAL_GetTick>
 8004b00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b02:	e009      	b.n	8004b18 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b04:	f7fc fb06 	bl	8001114 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d902      	bls.n	8004b18 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	73fb      	strb	r3, [r7, #15]
        break;
 8004b16:	e005      	b.n	8004b24 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b18:	4b2c      	ldr	r3, [pc, #176]	@ (8004bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1ef      	bne.n	8004b04 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b24:	7bfb      	ldrb	r3, [r7, #15]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d14a      	bne.n	8004bc0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d111      	bne.n	8004b54 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b30:	4b26      	ldr	r3, [pc, #152]	@ (8004bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004b38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6892      	ldr	r2, [r2, #8]
 8004b40:	0211      	lsls	r1, r2, #8
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	68d2      	ldr	r2, [r2, #12]
 8004b46:	0912      	lsrs	r2, r2, #4
 8004b48:	0452      	lsls	r2, r2, #17
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	491f      	ldr	r1, [pc, #124]	@ (8004bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	614b      	str	r3, [r1, #20]
 8004b52:	e011      	b.n	8004b78 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b54:	4b1d      	ldr	r3, [pc, #116]	@ (8004bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004b5c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6892      	ldr	r2, [r2, #8]
 8004b64:	0211      	lsls	r1, r2, #8
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6912      	ldr	r2, [r2, #16]
 8004b6a:	0852      	lsrs	r2, r2, #1
 8004b6c:	3a01      	subs	r2, #1
 8004b6e:	0652      	lsls	r2, r2, #25
 8004b70:	430a      	orrs	r2, r1
 8004b72:	4916      	ldr	r1, [pc, #88]	@ (8004bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b78:	4b14      	ldr	r3, [pc, #80]	@ (8004bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a13      	ldr	r2, [pc, #76]	@ (8004bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b84:	f7fc fac6 	bl	8001114 <HAL_GetTick>
 8004b88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b8a:	e009      	b.n	8004ba0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b8c:	f7fc fac2 	bl	8001114 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d902      	bls.n	8004ba0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	73fb      	strb	r3, [r7, #15]
          break;
 8004b9e:	e005      	b.n	8004bac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8004bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0ef      	beq.n	8004b8c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d106      	bne.n	8004bc0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004bb2:	4b06      	ldr	r3, [pc, #24]	@ (8004bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bb4:	695a      	ldr	r2, [r3, #20]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	4904      	ldr	r1, [pc, #16]	@ (8004bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	40021000 	.word	0x40021000

08004bd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e040      	b.n	8004c64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d106      	bne.n	8004bf8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7fc f8f4 	bl	8000de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2224      	movs	r2, #36	@ 0x24
 8004bfc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0201 	bic.w	r2, r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d002      	beq.n	8004c1c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fb36 	bl	8005288 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 f87b 	bl	8004d18 <UART_SetConfig>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d101      	bne.n	8004c2c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e01b      	b.n	8004c64 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689a      	ldr	r2, [r3, #8]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0201 	orr.w	r2, r2, #1
 8004c5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 fbb5 	bl	80053cc <UART_CheckIdleState>
 8004c62:	4603      	mov	r3, r0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e048      	b.n	8004d10 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d106      	bne.n	8004c94 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7fc f8a6 	bl	8000de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2224      	movs	r2, #36	@ 0x24
 8004c98:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0201 	bic.w	r2, r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 fae8 	bl	8005288 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f82d 	bl	8004d18 <UART_SetConfig>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e023      	b.n	8004d10 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689a      	ldr	r2, [r3, #8]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8004ce6:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689a      	ldr	r2, [r3, #8]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0208 	orr.w	r2, r2, #8
 8004cf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0201 	orr.w	r2, r2, #1
 8004d06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 fb5f 	bl	80053cc <UART_CheckIdleState>
 8004d0e:	4603      	mov	r3, r0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d1c:	b08a      	sub	sp, #40	@ 0x28
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	431a      	orrs	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	431a      	orrs	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	4ba4      	ldr	r3, [pc, #656]	@ (8004fd8 <UART_SetConfig+0x2c0>)
 8004d48:	4013      	ands	r3, r2
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	6812      	ldr	r2, [r2, #0]
 8004d4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d50:	430b      	orrs	r3, r1
 8004d52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a99      	ldr	r2, [pc, #612]	@ (8004fdc <UART_SetConfig+0x2c4>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d004      	beq.n	8004d84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d80:	4313      	orrs	r3, r2
 8004d82:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d94:	430a      	orrs	r2, r1
 8004d96:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a90      	ldr	r2, [pc, #576]	@ (8004fe0 <UART_SetConfig+0x2c8>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d126      	bne.n	8004df0 <UART_SetConfig+0xd8>
 8004da2:	4b90      	ldr	r3, [pc, #576]	@ (8004fe4 <UART_SetConfig+0x2cc>)
 8004da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004da8:	f003 0303 	and.w	r3, r3, #3
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	d81b      	bhi.n	8004de8 <UART_SetConfig+0xd0>
 8004db0:	a201      	add	r2, pc, #4	@ (adr r2, 8004db8 <UART_SetConfig+0xa0>)
 8004db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db6:	bf00      	nop
 8004db8:	08004dc9 	.word	0x08004dc9
 8004dbc:	08004dd9 	.word	0x08004dd9
 8004dc0:	08004dd1 	.word	0x08004dd1
 8004dc4:	08004de1 	.word	0x08004de1
 8004dc8:	2301      	movs	r3, #1
 8004dca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dce:	e116      	b.n	8004ffe <UART_SetConfig+0x2e6>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dd6:	e112      	b.n	8004ffe <UART_SetConfig+0x2e6>
 8004dd8:	2304      	movs	r3, #4
 8004dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dde:	e10e      	b.n	8004ffe <UART_SetConfig+0x2e6>
 8004de0:	2308      	movs	r3, #8
 8004de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004de6:	e10a      	b.n	8004ffe <UART_SetConfig+0x2e6>
 8004de8:	2310      	movs	r3, #16
 8004dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dee:	e106      	b.n	8004ffe <UART_SetConfig+0x2e6>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a7c      	ldr	r2, [pc, #496]	@ (8004fe8 <UART_SetConfig+0x2d0>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d138      	bne.n	8004e6c <UART_SetConfig+0x154>
 8004dfa:	4b7a      	ldr	r3, [pc, #488]	@ (8004fe4 <UART_SetConfig+0x2cc>)
 8004dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e00:	f003 030c 	and.w	r3, r3, #12
 8004e04:	2b0c      	cmp	r3, #12
 8004e06:	d82d      	bhi.n	8004e64 <UART_SetConfig+0x14c>
 8004e08:	a201      	add	r2, pc, #4	@ (adr r2, 8004e10 <UART_SetConfig+0xf8>)
 8004e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0e:	bf00      	nop
 8004e10:	08004e45 	.word	0x08004e45
 8004e14:	08004e65 	.word	0x08004e65
 8004e18:	08004e65 	.word	0x08004e65
 8004e1c:	08004e65 	.word	0x08004e65
 8004e20:	08004e55 	.word	0x08004e55
 8004e24:	08004e65 	.word	0x08004e65
 8004e28:	08004e65 	.word	0x08004e65
 8004e2c:	08004e65 	.word	0x08004e65
 8004e30:	08004e4d 	.word	0x08004e4d
 8004e34:	08004e65 	.word	0x08004e65
 8004e38:	08004e65 	.word	0x08004e65
 8004e3c:	08004e65 	.word	0x08004e65
 8004e40:	08004e5d 	.word	0x08004e5d
 8004e44:	2300      	movs	r3, #0
 8004e46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e4a:	e0d8      	b.n	8004ffe <UART_SetConfig+0x2e6>
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e52:	e0d4      	b.n	8004ffe <UART_SetConfig+0x2e6>
 8004e54:	2304      	movs	r3, #4
 8004e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e5a:	e0d0      	b.n	8004ffe <UART_SetConfig+0x2e6>
 8004e5c:	2308      	movs	r3, #8
 8004e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e62:	e0cc      	b.n	8004ffe <UART_SetConfig+0x2e6>
 8004e64:	2310      	movs	r3, #16
 8004e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e6a:	e0c8      	b.n	8004ffe <UART_SetConfig+0x2e6>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a5e      	ldr	r2, [pc, #376]	@ (8004fec <UART_SetConfig+0x2d4>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d125      	bne.n	8004ec2 <UART_SetConfig+0x1aa>
 8004e76:	4b5b      	ldr	r3, [pc, #364]	@ (8004fe4 <UART_SetConfig+0x2cc>)
 8004e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e7c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e80:	2b30      	cmp	r3, #48	@ 0x30
 8004e82:	d016      	beq.n	8004eb2 <UART_SetConfig+0x19a>
 8004e84:	2b30      	cmp	r3, #48	@ 0x30
 8004e86:	d818      	bhi.n	8004eba <UART_SetConfig+0x1a2>
 8004e88:	2b20      	cmp	r3, #32
 8004e8a:	d00a      	beq.n	8004ea2 <UART_SetConfig+0x18a>
 8004e8c:	2b20      	cmp	r3, #32
 8004e8e:	d814      	bhi.n	8004eba <UART_SetConfig+0x1a2>
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d002      	beq.n	8004e9a <UART_SetConfig+0x182>
 8004e94:	2b10      	cmp	r3, #16
 8004e96:	d008      	beq.n	8004eaa <UART_SetConfig+0x192>
 8004e98:	e00f      	b.n	8004eba <UART_SetConfig+0x1a2>
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ea0:	e0ad      	b.n	8004ffe <UART_SetConfig+0x2e6>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ea8:	e0a9      	b.n	8004ffe <UART_SetConfig+0x2e6>
 8004eaa:	2304      	movs	r3, #4
 8004eac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eb0:	e0a5      	b.n	8004ffe <UART_SetConfig+0x2e6>
 8004eb2:	2308      	movs	r3, #8
 8004eb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eb8:	e0a1      	b.n	8004ffe <UART_SetConfig+0x2e6>
 8004eba:	2310      	movs	r3, #16
 8004ebc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ec0:	e09d      	b.n	8004ffe <UART_SetConfig+0x2e6>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a4a      	ldr	r2, [pc, #296]	@ (8004ff0 <UART_SetConfig+0x2d8>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d125      	bne.n	8004f18 <UART_SetConfig+0x200>
 8004ecc:	4b45      	ldr	r3, [pc, #276]	@ (8004fe4 <UART_SetConfig+0x2cc>)
 8004ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ed2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004ed6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ed8:	d016      	beq.n	8004f08 <UART_SetConfig+0x1f0>
 8004eda:	2bc0      	cmp	r3, #192	@ 0xc0
 8004edc:	d818      	bhi.n	8004f10 <UART_SetConfig+0x1f8>
 8004ede:	2b80      	cmp	r3, #128	@ 0x80
 8004ee0:	d00a      	beq.n	8004ef8 <UART_SetConfig+0x1e0>
 8004ee2:	2b80      	cmp	r3, #128	@ 0x80
 8004ee4:	d814      	bhi.n	8004f10 <UART_SetConfig+0x1f8>
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d002      	beq.n	8004ef0 <UART_SetConfig+0x1d8>
 8004eea:	2b40      	cmp	r3, #64	@ 0x40
 8004eec:	d008      	beq.n	8004f00 <UART_SetConfig+0x1e8>
 8004eee:	e00f      	b.n	8004f10 <UART_SetConfig+0x1f8>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ef6:	e082      	b.n	8004ffe <UART_SetConfig+0x2e6>
 8004ef8:	2302      	movs	r3, #2
 8004efa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004efe:	e07e      	b.n	8004ffe <UART_SetConfig+0x2e6>
 8004f00:	2304      	movs	r3, #4
 8004f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f06:	e07a      	b.n	8004ffe <UART_SetConfig+0x2e6>
 8004f08:	2308      	movs	r3, #8
 8004f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f0e:	e076      	b.n	8004ffe <UART_SetConfig+0x2e6>
 8004f10:	2310      	movs	r3, #16
 8004f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f16:	e072      	b.n	8004ffe <UART_SetConfig+0x2e6>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a35      	ldr	r2, [pc, #212]	@ (8004ff4 <UART_SetConfig+0x2dc>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d12a      	bne.n	8004f78 <UART_SetConfig+0x260>
 8004f22:	4b30      	ldr	r3, [pc, #192]	@ (8004fe4 <UART_SetConfig+0x2cc>)
 8004f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f30:	d01a      	beq.n	8004f68 <UART_SetConfig+0x250>
 8004f32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f36:	d81b      	bhi.n	8004f70 <UART_SetConfig+0x258>
 8004f38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f3c:	d00c      	beq.n	8004f58 <UART_SetConfig+0x240>
 8004f3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f42:	d815      	bhi.n	8004f70 <UART_SetConfig+0x258>
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d003      	beq.n	8004f50 <UART_SetConfig+0x238>
 8004f48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f4c:	d008      	beq.n	8004f60 <UART_SetConfig+0x248>
 8004f4e:	e00f      	b.n	8004f70 <UART_SetConfig+0x258>
 8004f50:	2300      	movs	r3, #0
 8004f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f56:	e052      	b.n	8004ffe <UART_SetConfig+0x2e6>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f5e:	e04e      	b.n	8004ffe <UART_SetConfig+0x2e6>
 8004f60:	2304      	movs	r3, #4
 8004f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f66:	e04a      	b.n	8004ffe <UART_SetConfig+0x2e6>
 8004f68:	2308      	movs	r3, #8
 8004f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f6e:	e046      	b.n	8004ffe <UART_SetConfig+0x2e6>
 8004f70:	2310      	movs	r3, #16
 8004f72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f76:	e042      	b.n	8004ffe <UART_SetConfig+0x2e6>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a17      	ldr	r2, [pc, #92]	@ (8004fdc <UART_SetConfig+0x2c4>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d13a      	bne.n	8004ff8 <UART_SetConfig+0x2e0>
 8004f82:	4b18      	ldr	r3, [pc, #96]	@ (8004fe4 <UART_SetConfig+0x2cc>)
 8004f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004f8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f90:	d01a      	beq.n	8004fc8 <UART_SetConfig+0x2b0>
 8004f92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f96:	d81b      	bhi.n	8004fd0 <UART_SetConfig+0x2b8>
 8004f98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f9c:	d00c      	beq.n	8004fb8 <UART_SetConfig+0x2a0>
 8004f9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fa2:	d815      	bhi.n	8004fd0 <UART_SetConfig+0x2b8>
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <UART_SetConfig+0x298>
 8004fa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fac:	d008      	beq.n	8004fc0 <UART_SetConfig+0x2a8>
 8004fae:	e00f      	b.n	8004fd0 <UART_SetConfig+0x2b8>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fb6:	e022      	b.n	8004ffe <UART_SetConfig+0x2e6>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fbe:	e01e      	b.n	8004ffe <UART_SetConfig+0x2e6>
 8004fc0:	2304      	movs	r3, #4
 8004fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fc6:	e01a      	b.n	8004ffe <UART_SetConfig+0x2e6>
 8004fc8:	2308      	movs	r3, #8
 8004fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fce:	e016      	b.n	8004ffe <UART_SetConfig+0x2e6>
 8004fd0:	2310      	movs	r3, #16
 8004fd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fd6:	e012      	b.n	8004ffe <UART_SetConfig+0x2e6>
 8004fd8:	efff69f3 	.word	0xefff69f3
 8004fdc:	40008000 	.word	0x40008000
 8004fe0:	40013800 	.word	0x40013800
 8004fe4:	40021000 	.word	0x40021000
 8004fe8:	40004400 	.word	0x40004400
 8004fec:	40004800 	.word	0x40004800
 8004ff0:	40004c00 	.word	0x40004c00
 8004ff4:	40005000 	.word	0x40005000
 8004ff8:	2310      	movs	r3, #16
 8004ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a9f      	ldr	r2, [pc, #636]	@ (8005280 <UART_SetConfig+0x568>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d17a      	bne.n	80050fe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005008:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800500c:	2b08      	cmp	r3, #8
 800500e:	d824      	bhi.n	800505a <UART_SetConfig+0x342>
 8005010:	a201      	add	r2, pc, #4	@ (adr r2, 8005018 <UART_SetConfig+0x300>)
 8005012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005016:	bf00      	nop
 8005018:	0800503d 	.word	0x0800503d
 800501c:	0800505b 	.word	0x0800505b
 8005020:	08005045 	.word	0x08005045
 8005024:	0800505b 	.word	0x0800505b
 8005028:	0800504b 	.word	0x0800504b
 800502c:	0800505b 	.word	0x0800505b
 8005030:	0800505b 	.word	0x0800505b
 8005034:	0800505b 	.word	0x0800505b
 8005038:	08005053 	.word	0x08005053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800503c:	f7ff f870 	bl	8004120 <HAL_RCC_GetPCLK1Freq>
 8005040:	61f8      	str	r0, [r7, #28]
        break;
 8005042:	e010      	b.n	8005066 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005044:	4b8f      	ldr	r3, [pc, #572]	@ (8005284 <UART_SetConfig+0x56c>)
 8005046:	61fb      	str	r3, [r7, #28]
        break;
 8005048:	e00d      	b.n	8005066 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800504a:	f7fe ffd1 	bl	8003ff0 <HAL_RCC_GetSysClockFreq>
 800504e:	61f8      	str	r0, [r7, #28]
        break;
 8005050:	e009      	b.n	8005066 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005052:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005056:	61fb      	str	r3, [r7, #28]
        break;
 8005058:	e005      	b.n	8005066 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800505a:	2300      	movs	r3, #0
 800505c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005064:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 80fb 	beq.w	8005264 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	4613      	mov	r3, r2
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	4413      	add	r3, r2
 8005078:	69fa      	ldr	r2, [r7, #28]
 800507a:	429a      	cmp	r2, r3
 800507c:	d305      	bcc.n	800508a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005084:	69fa      	ldr	r2, [r7, #28]
 8005086:	429a      	cmp	r2, r3
 8005088:	d903      	bls.n	8005092 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005090:	e0e8      	b.n	8005264 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	2200      	movs	r2, #0
 8005096:	461c      	mov	r4, r3
 8005098:	4615      	mov	r5, r2
 800509a:	f04f 0200 	mov.w	r2, #0
 800509e:	f04f 0300 	mov.w	r3, #0
 80050a2:	022b      	lsls	r3, r5, #8
 80050a4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80050a8:	0222      	lsls	r2, r4, #8
 80050aa:	68f9      	ldr	r1, [r7, #12]
 80050ac:	6849      	ldr	r1, [r1, #4]
 80050ae:	0849      	lsrs	r1, r1, #1
 80050b0:	2000      	movs	r0, #0
 80050b2:	4688      	mov	r8, r1
 80050b4:	4681      	mov	r9, r0
 80050b6:	eb12 0a08 	adds.w	sl, r2, r8
 80050ba:	eb43 0b09 	adc.w	fp, r3, r9
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	603b      	str	r3, [r7, #0]
 80050c6:	607a      	str	r2, [r7, #4]
 80050c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050cc:	4650      	mov	r0, sl
 80050ce:	4659      	mov	r1, fp
 80050d0:	f7fb f87a 	bl	80001c8 <__aeabi_uldivmod>
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	4613      	mov	r3, r2
 80050da:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050e2:	d308      	bcc.n	80050f6 <UART_SetConfig+0x3de>
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050ea:	d204      	bcs.n	80050f6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	60da      	str	r2, [r3, #12]
 80050f4:	e0b6      	b.n	8005264 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80050fc:	e0b2      	b.n	8005264 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005106:	d15e      	bne.n	80051c6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005108:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800510c:	2b08      	cmp	r3, #8
 800510e:	d828      	bhi.n	8005162 <UART_SetConfig+0x44a>
 8005110:	a201      	add	r2, pc, #4	@ (adr r2, 8005118 <UART_SetConfig+0x400>)
 8005112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005116:	bf00      	nop
 8005118:	0800513d 	.word	0x0800513d
 800511c:	08005145 	.word	0x08005145
 8005120:	0800514d 	.word	0x0800514d
 8005124:	08005163 	.word	0x08005163
 8005128:	08005153 	.word	0x08005153
 800512c:	08005163 	.word	0x08005163
 8005130:	08005163 	.word	0x08005163
 8005134:	08005163 	.word	0x08005163
 8005138:	0800515b 	.word	0x0800515b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800513c:	f7fe fff0 	bl	8004120 <HAL_RCC_GetPCLK1Freq>
 8005140:	61f8      	str	r0, [r7, #28]
        break;
 8005142:	e014      	b.n	800516e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005144:	f7ff f802 	bl	800414c <HAL_RCC_GetPCLK2Freq>
 8005148:	61f8      	str	r0, [r7, #28]
        break;
 800514a:	e010      	b.n	800516e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800514c:	4b4d      	ldr	r3, [pc, #308]	@ (8005284 <UART_SetConfig+0x56c>)
 800514e:	61fb      	str	r3, [r7, #28]
        break;
 8005150:	e00d      	b.n	800516e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005152:	f7fe ff4d 	bl	8003ff0 <HAL_RCC_GetSysClockFreq>
 8005156:	61f8      	str	r0, [r7, #28]
        break;
 8005158:	e009      	b.n	800516e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800515a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800515e:	61fb      	str	r3, [r7, #28]
        break;
 8005160:	e005      	b.n	800516e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005162:	2300      	movs	r3, #0
 8005164:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800516c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d077      	beq.n	8005264 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	005a      	lsls	r2, r3, #1
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	085b      	lsrs	r3, r3, #1
 800517e:	441a      	add	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	fbb2 f3f3 	udiv	r3, r2, r3
 8005188:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	2b0f      	cmp	r3, #15
 800518e:	d916      	bls.n	80051be <UART_SetConfig+0x4a6>
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005196:	d212      	bcs.n	80051be <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	b29b      	uxth	r3, r3
 800519c:	f023 030f 	bic.w	r3, r3, #15
 80051a0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	085b      	lsrs	r3, r3, #1
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	8afb      	ldrh	r3, [r7, #22]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	8afa      	ldrh	r2, [r7, #22]
 80051ba:	60da      	str	r2, [r3, #12]
 80051bc:	e052      	b.n	8005264 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80051c4:	e04e      	b.n	8005264 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80051ca:	2b08      	cmp	r3, #8
 80051cc:	d827      	bhi.n	800521e <UART_SetConfig+0x506>
 80051ce:	a201      	add	r2, pc, #4	@ (adr r2, 80051d4 <UART_SetConfig+0x4bc>)
 80051d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d4:	080051f9 	.word	0x080051f9
 80051d8:	08005201 	.word	0x08005201
 80051dc:	08005209 	.word	0x08005209
 80051e0:	0800521f 	.word	0x0800521f
 80051e4:	0800520f 	.word	0x0800520f
 80051e8:	0800521f 	.word	0x0800521f
 80051ec:	0800521f 	.word	0x0800521f
 80051f0:	0800521f 	.word	0x0800521f
 80051f4:	08005217 	.word	0x08005217
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051f8:	f7fe ff92 	bl	8004120 <HAL_RCC_GetPCLK1Freq>
 80051fc:	61f8      	str	r0, [r7, #28]
        break;
 80051fe:	e014      	b.n	800522a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005200:	f7fe ffa4 	bl	800414c <HAL_RCC_GetPCLK2Freq>
 8005204:	61f8      	str	r0, [r7, #28]
        break;
 8005206:	e010      	b.n	800522a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005208:	4b1e      	ldr	r3, [pc, #120]	@ (8005284 <UART_SetConfig+0x56c>)
 800520a:	61fb      	str	r3, [r7, #28]
        break;
 800520c:	e00d      	b.n	800522a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800520e:	f7fe feef 	bl	8003ff0 <HAL_RCC_GetSysClockFreq>
 8005212:	61f8      	str	r0, [r7, #28]
        break;
 8005214:	e009      	b.n	800522a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005216:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800521a:	61fb      	str	r3, [r7, #28]
        break;
 800521c:	e005      	b.n	800522a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800521e:	2300      	movs	r3, #0
 8005220:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005228:	bf00      	nop
    }

    if (pclk != 0U)
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d019      	beq.n	8005264 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	085a      	lsrs	r2, r3, #1
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	441a      	add	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005242:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	2b0f      	cmp	r3, #15
 8005248:	d909      	bls.n	800525e <UART_SetConfig+0x546>
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005250:	d205      	bcs.n	800525e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	b29a      	uxth	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	60da      	str	r2, [r3, #12]
 800525c:	e002      	b.n	8005264 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005270:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005274:	4618      	mov	r0, r3
 8005276:	3728      	adds	r7, #40	@ 0x28
 8005278:	46bd      	mov	sp, r7
 800527a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800527e:	bf00      	nop
 8005280:	40008000 	.word	0x40008000
 8005284:	00f42400 	.word	0x00f42400

08005288 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005294:	f003 0308 	and.w	r3, r3, #8
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00a      	beq.n	80052b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00a      	beq.n	80052f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fa:	f003 0304 	and.w	r3, r3, #4
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531c:	f003 0310 	and.w	r3, r3, #16
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00a      	beq.n	800533a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533e:	f003 0320 	and.w	r3, r3, #32
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00a      	beq.n	800535c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005364:	2b00      	cmp	r3, #0
 8005366:	d01a      	beq.n	800539e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005382:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005386:	d10a      	bne.n	800539e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	605a      	str	r2, [r3, #4]
  }
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b098      	sub	sp, #96	@ 0x60
 80053d0:	af02      	add	r7, sp, #8
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053dc:	f7fb fe9a 	bl	8001114 <HAL_GetTick>
 80053e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0308 	and.w	r3, r3, #8
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d12e      	bne.n	800544e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053f8:	2200      	movs	r2, #0
 80053fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f88c 	bl	800551c <UART_WaitOnFlagUntilTimeout>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d021      	beq.n	800544e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005412:	e853 3f00 	ldrex	r3, [r3]
 8005416:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800541a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800541e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	461a      	mov	r2, r3
 8005426:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005428:	647b      	str	r3, [r7, #68]	@ 0x44
 800542a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800542e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005430:	e841 2300 	strex	r3, r2, [r1]
 8005434:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1e6      	bne.n	800540a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2220      	movs	r2, #32
 8005440:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e062      	b.n	8005514 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	2b04      	cmp	r3, #4
 800545a:	d149      	bne.n	80054f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800545c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005464:	2200      	movs	r2, #0
 8005466:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f856 	bl	800551c <UART_WaitOnFlagUntilTimeout>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d03c      	beq.n	80054f0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547e:	e853 3f00 	ldrex	r3, [r3]
 8005482:	623b      	str	r3, [r7, #32]
   return(result);
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800548a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	461a      	mov	r2, r3
 8005492:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005494:	633b      	str	r3, [r7, #48]	@ 0x30
 8005496:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005498:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800549a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800549c:	e841 2300 	strex	r3, r2, [r1]
 80054a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1e6      	bne.n	8005476 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3308      	adds	r3, #8
 80054ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	e853 3f00 	ldrex	r3, [r3]
 80054b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 0301 	bic.w	r3, r3, #1
 80054be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3308      	adds	r3, #8
 80054c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054c8:	61fa      	str	r2, [r7, #28]
 80054ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054cc:	69b9      	ldr	r1, [r7, #24]
 80054ce:	69fa      	ldr	r2, [r7, #28]
 80054d0:	e841 2300 	strex	r3, r2, [r1]
 80054d4:	617b      	str	r3, [r7, #20]
   return(result);
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1e5      	bne.n	80054a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2220      	movs	r2, #32
 80054e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e011      	b.n	8005514 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2220      	movs	r2, #32
 80054f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2220      	movs	r2, #32
 80054fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3758      	adds	r7, #88	@ 0x58
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	603b      	str	r3, [r7, #0]
 8005528:	4613      	mov	r3, r2
 800552a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800552c:	e049      	b.n	80055c2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005534:	d045      	beq.n	80055c2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005536:	f7fb fded 	bl	8001114 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	429a      	cmp	r2, r3
 8005544:	d302      	bcc.n	800554c <UART_WaitOnFlagUntilTimeout+0x30>
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e048      	b.n	80055e2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0304 	and.w	r3, r3, #4
 800555a:	2b00      	cmp	r3, #0
 800555c:	d031      	beq.n	80055c2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	69db      	ldr	r3, [r3, #28]
 8005564:	f003 0308 	and.w	r3, r3, #8
 8005568:	2b08      	cmp	r3, #8
 800556a:	d110      	bne.n	800558e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2208      	movs	r2, #8
 8005572:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 f838 	bl	80055ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2208      	movs	r2, #8
 800557e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e029      	b.n	80055e2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005598:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800559c:	d111      	bne.n	80055c2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f000 f81e 	bl	80055ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2220      	movs	r2, #32
 80055b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e00f      	b.n	80055e2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	69da      	ldr	r2, [r3, #28]
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	4013      	ands	r3, r2
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	bf0c      	ite	eq
 80055d2:	2301      	moveq	r3, #1
 80055d4:	2300      	movne	r3, #0
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	461a      	mov	r2, r3
 80055da:	79fb      	ldrb	r3, [r7, #7]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d0a6      	beq.n	800552e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b095      	sub	sp, #84	@ 0x54
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055fa:	e853 3f00 	ldrex	r3, [r3]
 80055fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005602:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005606:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	461a      	mov	r2, r3
 800560e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005610:	643b      	str	r3, [r7, #64]	@ 0x40
 8005612:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005614:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005616:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005618:	e841 2300 	strex	r3, r2, [r1]
 800561c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800561e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1e6      	bne.n	80055f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	3308      	adds	r3, #8
 800562a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	e853 3f00 	ldrex	r3, [r3]
 8005632:	61fb      	str	r3, [r7, #28]
   return(result);
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	f023 0301 	bic.w	r3, r3, #1
 800563a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	3308      	adds	r3, #8
 8005642:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005644:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005646:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005648:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800564a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800564c:	e841 2300 	strex	r3, r2, [r1]
 8005650:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1e5      	bne.n	8005624 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800565c:	2b01      	cmp	r3, #1
 800565e:	d118      	bne.n	8005692 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	e853 3f00 	ldrex	r3, [r3]
 800566c:	60bb      	str	r3, [r7, #8]
   return(result);
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	f023 0310 	bic.w	r3, r3, #16
 8005674:	647b      	str	r3, [r7, #68]	@ 0x44
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	461a      	mov	r2, r3
 800567c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800567e:	61bb      	str	r3, [r7, #24]
 8005680:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005682:	6979      	ldr	r1, [r7, #20]
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	e841 2300 	strex	r3, r2, [r1]
 800568a:	613b      	str	r3, [r7, #16]
   return(result);
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1e6      	bne.n	8005660 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2220      	movs	r2, #32
 8005696:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80056a6:	bf00      	nop
 80056a8:	3754      	adds	r7, #84	@ 0x54
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <memset>:
 80056b2:	4402      	add	r2, r0
 80056b4:	4603      	mov	r3, r0
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d100      	bne.n	80056bc <memset+0xa>
 80056ba:	4770      	bx	lr
 80056bc:	f803 1b01 	strb.w	r1, [r3], #1
 80056c0:	e7f9      	b.n	80056b6 <memset+0x4>
	...

080056c4 <__libc_init_array>:
 80056c4:	b570      	push	{r4, r5, r6, lr}
 80056c6:	4d0d      	ldr	r5, [pc, #52]	@ (80056fc <__libc_init_array+0x38>)
 80056c8:	4c0d      	ldr	r4, [pc, #52]	@ (8005700 <__libc_init_array+0x3c>)
 80056ca:	1b64      	subs	r4, r4, r5
 80056cc:	10a4      	asrs	r4, r4, #2
 80056ce:	2600      	movs	r6, #0
 80056d0:	42a6      	cmp	r6, r4
 80056d2:	d109      	bne.n	80056e8 <__libc_init_array+0x24>
 80056d4:	4d0b      	ldr	r5, [pc, #44]	@ (8005704 <__libc_init_array+0x40>)
 80056d6:	4c0c      	ldr	r4, [pc, #48]	@ (8005708 <__libc_init_array+0x44>)
 80056d8:	f000 f818 	bl	800570c <_init>
 80056dc:	1b64      	subs	r4, r4, r5
 80056de:	10a4      	asrs	r4, r4, #2
 80056e0:	2600      	movs	r6, #0
 80056e2:	42a6      	cmp	r6, r4
 80056e4:	d105      	bne.n	80056f2 <__libc_init_array+0x2e>
 80056e6:	bd70      	pop	{r4, r5, r6, pc}
 80056e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80056ec:	4798      	blx	r3
 80056ee:	3601      	adds	r6, #1
 80056f0:	e7ee      	b.n	80056d0 <__libc_init_array+0xc>
 80056f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056f6:	4798      	blx	r3
 80056f8:	3601      	adds	r6, #1
 80056fa:	e7f2      	b.n	80056e2 <__libc_init_array+0x1e>
 80056fc:	08005774 	.word	0x08005774
 8005700:	08005774 	.word	0x08005774
 8005704:	08005774 	.word	0x08005774
 8005708:	08005778 	.word	0x08005778

0800570c <_init>:
 800570c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570e:	bf00      	nop
 8005710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005712:	bc08      	pop	{r3}
 8005714:	469e      	mov	lr, r3
 8005716:	4770      	bx	lr

08005718 <_fini>:
 8005718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571a:	bf00      	nop
 800571c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800571e:	bc08      	pop	{r3}
 8005720:	469e      	mov	lr, r3
 8005722:	4770      	bx	lr
